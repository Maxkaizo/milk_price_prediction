diff --git a/Pipfile b/Pipfile
index 91ed76b..55e6f7c 100644
--- a/Pipfile
+++ b/Pipfile
@@ -25,6 +25,7 @@ dotenv = "*"
 [dev-packages]
 ipykernel = "*"
 awslambdaric = "*"
+black = "*"
 
 [requires]
 python_version = "3.12"
diff --git a/Pipfile.lock b/Pipfile.lock
index f425660..2065a3a 100644
--- a/Pipfile.lock
+++ b/Pipfile.lock
@@ -1,7 +1,7 @@
 {
     "_meta": {
         "hash": {
-            "sha256": "e4a8996575fd41df36b147a249c8713795da8a8ea1d988aff16ff937869c44b3"
+            "sha256": "a8c9fc7ed2d70a76eb83691c592532392d78fd7dddf86aef1a6b71379b620161"
         },
         "pipfile-spec": 6,
         "requires": {
@@ -17,130 +17,6 @@
         ]
     },
     "default": {
-        "aiobotocore": {
-            "hashes": [
-                "sha256:5ca24feb49be73bd6cd92e82e95aefb0647c07bb85ca57000a0361b9554503d8",
-                "sha256:9c2cbd6e813bb6c60b7f20fc11897976a583c57b0093a87bebfe80a9b08746b2"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==2.23.2"
-        },
-        "aiohappyeyeballs": {
-            "hashes": [
-                "sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558",
-                "sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==2.6.1"
-        },
-        "aiohttp": {
-            "hashes": [
-                "sha256:010cc9bbd06db80fe234d9003f67e97a10fe003bfbedb40da7d71c1008eda0fe",
-                "sha256:049ec0360f939cd164ecbfd2873eaa432613d5e77d6b04535e3d1fbae5a9e645",
-                "sha256:098e92835b8119b54c693f2f88a1dec690e20798ca5f5fe5f0520245253ee0af",
-                "sha256:0a146708808c9b7a988a4af3821379e379e0f0e5e466ca31a73dbdd0325b0263",
-                "sha256:0a23918fedc05806966a2438489dcffccbdf83e921a1170773b6178d04ade142",
-                "sha256:0c643f4d75adea39e92c0f01b3fb83d57abdec8c9279b3078b68a3a52b3933b6",
-                "sha256:1004e67962efabbaf3f03b11b4c43b834081c9e3f9b32b16a7d97d4708a9abe6",
-                "sha256:14954a2988feae3987f1eb49c706bff39947605f4b6fa4027c1d75743723eb09",
-                "sha256:1a649001580bdb37c6fdb1bebbd7e3bc688e8ec2b5c6f52edbb664662b17dc84",
-                "sha256:2776c7ec89c54a47029940177e75c8c07c29c66f73464784971d6a81904ce9d1",
-                "sha256:2abbb216a1d3a2fe86dbd2edce20cdc5e9ad0be6378455b05ec7f77361b3ab50",
-                "sha256:2c7d81a277fa78b2203ab626ced1487420e8c11a8e373707ab72d189fcdad20a",
-                "sha256:2ce13fcfb0bb2f259fb42106cdc63fa5515fb85b7e87177267d89a771a660b79",
-                "sha256:2e5a495cb1be69dae4b08f35a6c4579c539e9b5706f606632102c0f855bcba7c",
-                "sha256:2ee8a8ac39ce45f3e55663891d4b1d15598c157b4d494a4613e704c8b43112cd",
-                "sha256:3b6f0af863cf17e6222b1735a756d664159e58855da99cfe965134a3ff63b0b0",
-                "sha256:3bdd6e17e16e1dbd3db74d7f989e8af29c4d2e025f9828e6ef45fbdee158ec75",
-                "sha256:3beb14f053222b391bf9cf92ae82e0171067cc9c8f52453a0f1ec7c37df12a77",
-                "sha256:3c5092ce14361a73086b90c6efb3948ffa5be2f5b6fbcf52e8d8c8b8848bb97c",
-                "sha256:3ead1c00f8521a5c9070fcb88f02967b1d8a0544e6d85c253f6968b785e1a2ab",
-                "sha256:3eae49032c29d356b94eee45a3f39fdf4b0814b397638c2f718e96cfadf4c4e4",
-                "sha256:3f9d7c55b41ed687b9d7165b17672340187f87a773c98236c987f08c858145a9",
-                "sha256:40b3fee496a47c3b4a39a731954c06f0bd9bd3e8258c059a4beb76ac23f8e421",
-                "sha256:421da6fd326460517873274875c6c5a18ff225b40da2616083c5a34a7570b685",
-                "sha256:4420cf9d179ec8dfe4be10e7d0fe47d6d606485512ea2265b0d8c5113372771b",
-                "sha256:46749be6e89cd78d6068cdf7da51dbcfa4321147ab8e4116ee6678d9a056a0cf",
-                "sha256:47f6b962246f0a774fbd3b6b7be25d59b06fdb2f164cf2513097998fc6a29693",
-                "sha256:4c39e87afe48aa3e814cac5f535bc6199180a53e38d3f51c5e2530f5aa4ec58c",
-                "sha256:4fc61385e9c98d72fcdf47e6dd81833f47b2f77c114c29cd64a361be57a763a2",
-                "sha256:5015082477abeafad7203757ae44299a610e89ee82a1503e3d4184e6bafdd519",
-                "sha256:5346b93e62ab51ee2a9d68e8f73c7cf96ffb73568a23e683f931e52450e4148d",
-                "sha256:536ad7234747a37e50e7b6794ea868833d5220b49c92806ae2d7e8a9d6b5de02",
-                "sha256:56822ff5ddfd1b745534e658faba944012346184fbfe732e0d6134b744516eea",
-                "sha256:57d16590a351dfc914670bd72530fd78344b885a00b250e992faea565b7fdc05",
-                "sha256:5fa5d9eb82ce98959fc1031c28198b431b4d9396894f385cb63f1e2f3f20ca6b",
-                "sha256:6404dfc8cdde35c69aaa489bb3542fb86ef215fc70277c892be8af540e5e21c0",
-                "sha256:6443cca89553b7a5485331bc9bedb2342b08d073fa10b8c7d1c60579c4a7b9bd",
-                "sha256:691d203c2bdf4f4637792efbbcdcd157ae11e55eaeb5e9c360c1206fb03d4d98",
-                "sha256:6990ef617f14450bc6b34941dba4f12d5613cbf4e33805932f853fbd1cf18bfb",
-                "sha256:6c5f40ec615e5264f44b4282ee27628cea221fcad52f27405b80abb346d9f3f8",
-                "sha256:6d86a2fbdd14192e2f234a92d3b494dd4457e683ba07e5905a0b3ee25389ac9f",
-                "sha256:74bdd8c864b36c3673741023343565d95bfbd778ffe1eb4d412c135a28a8dc89",
-                "sha256:74dad41b3458dbb0511e760fb355bb0b6689e0630de8a22b1b62a98777136e16",
-                "sha256:760fb7db442f284996e39cf9915a94492e1896baac44f06ae551974907922b64",
-                "sha256:79b26fe467219add81d5e47b4a4ba0f2394e8b7c7c3198ed36609f9ba161aecb",
-                "sha256:7c7dd29c7b5bda137464dc9bfc738d7ceea46ff70309859ffde8c022e9b08ba7",
-                "sha256:7fbc8a7c410bb3ad5d595bb7118147dfbb6449d862cc1125cf8867cb337e8728",
-                "sha256:802d3868f5776e28f7bf69d349c26fc0efadb81676d0afa88ed00d98a26340b7",
-                "sha256:83603f881e11f0f710f8e2327817c82e79431ec976448839f3cd05d7afe8f830",
-                "sha256:8466151554b593909d30a0a125d638b4e5f3836e5aecde85b66b80ded1cb5b0d",
-                "sha256:86ceded4e78a992f835209e236617bffae649371c4a50d5e5a3987f237db84b8",
-                "sha256:894261472691d6fe76ebb7fcf2e5870a2ac284c7406ddc95823c8598a1390f0d",
-                "sha256:8e995e1abc4ed2a454c731385bf4082be06f875822adc4c6d9eaadf96e20d406",
-                "sha256:8faa08fcc2e411f7ab91d1541d9d597d3a90e9004180edb2072238c085eac8c2",
-                "sha256:9b2af240143dd2765e0fb661fd0361a1b469cab235039ea57663cda087250ea9",
-                "sha256:9f922ffd05034d439dde1c77a20461cf4a1b0831e6caa26151fe7aa8aaebc315",
-                "sha256:a041e7e2612041a6ddf1c6a33b883be6a421247c7afd47e885969ee4cc58bd8d",
-                "sha256:aaa2234bb60c4dbf82893e934d8ee8dea30446f0647e024074237a56a08c01bd",
-                "sha256:ac77f709a2cde2cc71257ab2d8c74dd157c67a0558a0d2799d5d571b4c63d44d",
-                "sha256:ad702e57dc385cae679c39d318def49aef754455f237499d5b99bea4ef582e51",
-                "sha256:b2acbbfff69019d9014508c4ba0401822e8bae5a5fdc3b6814285b71231b60f3",
-                "sha256:b390ef5f62bb508a9d67cb3bba9b8356e23b3996da7062f1a57ce1a79d2b3d34",
-                "sha256:b52dcf013b57464b6d1e51b627adfd69a8053e84b7103a7cd49c030f9ca44461",
-                "sha256:b5b7fe4972d48a4da367043b8e023fb70a04d1490aa7d68800e465d1b97e493b",
-                "sha256:b6fc902bff74d9b1879ad55f5404153e2b33a82e72a95c89cec5eb6cc9e92fbc",
-                "sha256:b7011a70b56facde58d6d26da4fec3280cc8e2a78c714c96b7a01a87930a9530",
-                "sha256:b761bac1192ef24e16706d761aefcb581438b34b13a2f069a6d343ec8fb693a5",
-                "sha256:b784d6ed757f27574dca1c336f968f4e81130b27595e458e69457e6878251f5d",
-                "sha256:b97752ff12cc12f46a9b20327104448042fce5c33a624f88c18f66f9368091c7",
-                "sha256:bc4fbc61bb3548d3b482f9ac7ddd0f18c67e4225aaa4e8552b9f1ac7e6bda9e5",
-                "sha256:bc9a0f6569ff990e0bbd75506c8d8fe7214c8f6579cca32f0546e54372a3bb54",
-                "sha256:bd44d5936ab3193c617bfd6c9a7d8d1085a8dc8c3f44d5f1dcf554d17d04cf7d",
-                "sha256:ced339d7c9b5030abad5854aa5413a77565e5b6e6248ff927d3e174baf3badf7",
-                "sha256:d3ce17ce0220383a0f9ea07175eeaa6aa13ae5a41f30bc61d84df17f0e9b1117",
-                "sha256:d5f1b4ce5bc528a6ee38dbf5f39bbf11dd127048726323b72b8e85769319ffc4",
-                "sha256:d849b0901b50f2185874b9a232f38e26b9b3d4810095a7572eacea939132d4e1",
-                "sha256:db71ce547012a5420a39c1b744d485cfb823564d01d5d20805977f5ea1345676",
-                "sha256:e153e8adacfe2af562861b72f8bc47f8a5c08e010ac94eebbe33dc21d677cd5b",
-                "sha256:edd533a07da85baa4b423ee8839e3e91681c7bfa19b04260a469ee94b778bf6d",
-                "sha256:f0adb4177fa748072546fb650d9bd7398caaf0e15b370ed3317280b13f4083b0",
-                "sha256:f0fa751efb11a541f57db59c1dd821bec09031e01452b2b6217319b3a1f34f3d",
-                "sha256:f2800614cd560287be05e33a679638e586a2d7401f4ddf99e304d98878c29444",
-                "sha256:f813c3e9032331024de2eb2e32a88d86afb69291fbc37a3a3ae81cc9917fb3d0",
-                "sha256:fc49c4de44977aa8601a00edbf157e9a421f227aa7eb477d9e3df48343311065",
-                "sha256:fd736ed420f4db2b8148b52b46b88ed038d0354255f9a73196b7bbce3ea97545",
-                "sha256:fe086edf38b2222328cdf89af0dde2439ee173b8ad7cb659b4e4c6f385b2be3d"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==3.12.15"
-        },
-        "aioitertools": {
-            "hashes": [
-                "sha256:c2a9055b4fbb7705f561b9d86053e8af5d10cc845d22c32008c43490b2d8dd6b",
-                "sha256:fc1f5fac3d737354de8831cbba3eb04f79dd649d8f3afb4c5b114925e662a796"
-            ],
-            "markers": "python_version >= '3.8'",
-            "version": "==0.12.0"
-        },
-        "aiosignal": {
-            "hashes": [
-                "sha256:053243f8b92b990551949e63930a839ff0cf0b0ebbe0597b0f3fb19e1a0fe82e",
-                "sha256:f47eecd9468083c2029cc99945502cb7708b082c232f9aca65da147157b251c7"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==1.4.0"
-        },
         "aiosqlite": {
             "hashes": [
                 "sha256:131bb8056daa3bc875608c631c678cda73922a2d4ba8aec373b19f18c17e7aa3",
@@ -182,11 +58,11 @@
         },
         "apprise": {
             "hashes": [
-                "sha256:e9b5abb73244c21a30ee493860f8d4ae80665d225b1b436179d48db4f6fc5b9e",
-                "sha256:f583667ea35b8899cd46318c6cb26f0faf6a4605b119174c2523a012590c65a6"
+                "sha256:17dca8ad0a5b2063f6bae707979a51ca2cb374fcc66b0dd5c05a9d286dd40069",
+                "sha256:483122aee19a89a7b075ecd48ef11ae37d79744f7aeb450bcf985a9a6c28c988"
             ],
-            "markers": "python_version >= '3.6'",
-            "version": "==1.9.3"
+            "markers": "python_version >= '3.9'",
+            "version": "==1.9.4"
         },
         "asgi-lifespan": {
             "hashes": [
@@ -341,20 +217,20 @@
         },
         "boto3": {
             "hashes": [
-                "sha256:456ea6baef037eb6205d64e012259d14f0c9300c9b30603890746c1a0882fa01",
-                "sha256:dcea5270ccced0b4b962eb5874cb71b6232ccfc6203e05bf834a314442e4a79c"
+                "sha256:7c007d5c8ee549e9fcad0927536502da199b27891006ef515330f429aca9671f",
+                "sha256:985ed4bf64729807f870eadbc46ad98baf93096917f7194ec39d743ff75b3f1d"
             ],
             "index": "pypi",
             "markers": "python_version >= '3.9'",
-            "version": "==1.39.8"
+            "version": "==1.40.1"
         },
         "botocore": {
             "hashes": [
-                "sha256:3848bd9057ea8dbc059e7764eda63bda575727ad1101dbd03636ab4a6f283fa5",
-                "sha256:ab43f79c6893271934faba7ae1987a313d59576361c544c70a5391ade560891d"
+                "sha256:bdf30e2c0e8cdb939d81fc243182a6d1dd39c416694b406c5f2ea079b1c2f3f5",
+                "sha256:e039774b55fbd6fe59f0f4fea51d156a2433bd4d8faa64fc1b87aee9a03f415d"
             ],
             "markers": "python_version >= '3.9'",
-            "version": "==1.39.8"
+            "version": "==1.40.1"
         },
         "cachetools": {
             "hashes": [
@@ -373,11 +249,11 @@
         },
         "certifi": {
             "hashes": [
-                "sha256:6b31f564a415d79ee77df69d757bb49a5bb53bd9f756cbbe24394ffd6fc1f4b2",
-                "sha256:8ea99dbdfaaf2ba2f9bac77b9249ef62ec5218e7c2b2e903378ed5fccf765995"
+                "sha256:e564105f78ded564e3ae7c923924435e1daa7463faeab5bb932bc53ffae63407",
+                "sha256:f6c12493cfb1b06ba2ff328595af9350c65d6644968e5d3a2ffd78699af217a5"
             ],
             "markers": "python_version >= '3.7'",
-            "version": "==2025.7.14"
+            "version": "==2025.8.3"
         },
         "cffi": {
             "hashes": [
@@ -892,116 +768,6 @@
             "markers": "python_version >= '3.9'",
             "version": "==4.59.0"
         },
-        "frozenlist": {
-            "hashes": [
-                "sha256:04fb24d104f425da3540ed83cbfc31388a586a7696142004c577fa61c6298c3f",
-                "sha256:05579bf020096fe05a764f1f84cd104a12f78eaab68842d036772dc6d4870b4b",
-                "sha256:0aa7e176ebe115379b5b1c95b4096fb1c17cce0847402e227e712c27bdb5a949",
-                "sha256:1073557c941395fdfcfac13eb2456cb8aad89f9de27bae29fabca8e563b12615",
-                "sha256:1137b78384eebaf70560a36b7b229f752fb64d463d38d1304939984d5cb887b6",
-                "sha256:15900082e886edb37480335d9d518cec978afc69ccbc30bd18610b7c1b22a718",
-                "sha256:15a7eaba63983d22c54d255b854e8108e7e5f3e89f647fc854bd77a237e767df",
-                "sha256:1a85e345b4c43db8b842cab1feb41be5cc0b10a1830e6295b69d7310f99becaf",
-                "sha256:1e63344c4e929b1a01e29bc184bbb5fd82954869033765bfe8d65d09e336a677",
-                "sha256:1eaa7e9c6d15df825bf255649e05bd8a74b04a4d2baa1ae46d9c2d00b2ca2cb5",
-                "sha256:1ed8d2fa095aae4bdc7fdd80351009a48d286635edffee66bf865e37a9125c50",
-                "sha256:1f5906d3359300b8a9bb194239491122e6cf1444c2efb88865426f170c262cdb",
-                "sha256:21884e23cffabb157a9dd7e353779077bf5b8f9a58e9b262c6caad2ef5f80a56",
-                "sha256:24c34bea555fe42d9f928ba0a740c553088500377448febecaa82cc3e88aa1fa",
-                "sha256:284d233a8953d7b24f9159b8a3496fc1ddc00f4db99c324bd5fb5f22d8698ea7",
-                "sha256:290a172aae5a4c278c6da8a96222e6337744cd9c77313efe33d5670b9f65fc43",
-                "sha256:2e310d81923c2437ea8670467121cc3e9b0f76d3043cc1d2331d56c7fb7a3a8f",
-                "sha256:2ea2a7369eb76de2217a842f22087913cdf75f63cf1307b9024ab82dfb525938",
-                "sha256:32dc2e08c67d86d0969714dd484fd60ff08ff81d1a1e40a77dd34a387e6ebc0c",
-                "sha256:34a69a85e34ff37791e94542065c8416c1afbf820b68f720452f636d5fb990cd",
-                "sha256:376b6222d114e97eeec13d46c486facd41d4f43bab626b7c3f6a8b4e81a5192c",
-                "sha256:3789ebc19cb811163e70fe2bd354cea097254ce6e707ae42e56f45e31e96cb8e",
-                "sha256:387cbfdcde2f2353f19c2f66bbb52406d06ed77519ac7ee21be0232147c2592d",
-                "sha256:3a14027124ddb70dfcee5148979998066897e79f89f64b13328595c4bdf77c81",
-                "sha256:3bf8010d71d4507775f658e9823210b7427be36625b387221642725b515dcf3e",
-                "sha256:3d688126c242a6fabbd92e02633414d40f50bb6002fa4cf995a1d18051525657",
-                "sha256:3dabd5a8f84573c8d10d8859a50ea2dec01eea372031929871368c09fa103478",
-                "sha256:3dbf9952c4bb0e90e98aec1bd992b3318685005702656bc6f67c1a32b76787f2",
-                "sha256:3fbba20e662b9c2130dc771e332a99eff5da078b2b2648153a40669a6d0e36ca",
-                "sha256:400ddd24ab4e55014bba442d917203c73b2846391dd42ca5e38ff52bb18c3c5e",
-                "sha256:41be2964bd4b15bf575e5daee5a5ce7ed3115320fb3c2b71fca05582ffa4dc9e",
-                "sha256:426c7bc70e07cfebc178bc4c2bf2d861d720c4fff172181eeb4a4c41d4ca2ad3",
-                "sha256:43a82fce6769c70f2f5a06248b614a7d268080a9d20f7457ef10ecee5af82b63",
-                "sha256:45a6f2fdbd10e074e8814eb98b05292f27bad7d1883afbe009d96abdcf3bc898",
-                "sha256:46d84d49e00c9429238a7ce02dc0be8f6d7cd0cd405abd1bebdc991bf27c15bd",
-                "sha256:488d0a7d6a0008ca0db273c542098a0fa9e7dfaa7e57f70acef43f32b3f69dca",
-                "sha256:4a646531fa8d82c87fe4bb2e596f23173caec9185bfbca5d583b4ccfb95183e2",
-                "sha256:4e7e9652b3d367c7bd449a727dc79d5043f48b88d0cbfd4f9f1060cf2b414104",
-                "sha256:52109052b9791a3e6b5d1b65f4b909703984b770694d3eb64fad124c835d7cba",
-                "sha256:563b72efe5da92e02eb68c59cb37205457c977aa7a449ed1b37e6939e5c47c6a",
-                "sha256:5fc4df05a6591c7768459caba1b342d9ec23fa16195e744939ba5914596ae3e1",
-                "sha256:61d1a5baeaac6c0798ff6edfaeaa00e0e412d49946c53fae8d4b8e8b3566c4ae",
-                "sha256:69cac419ac6a6baad202c85aaf467b65ac860ac2e7f2ac1686dc40dbb52f6577",
-                "sha256:6a5c505156368e4ea6b53b5ac23c92d7edc864537ff911d2fb24c140bb175e60",
-                "sha256:6aeac207a759d0dedd2e40745575ae32ab30926ff4fa49b1635def65806fddee",
-                "sha256:6eb93efb8101ef39d32d50bce242c84bcbddb4f7e9febfa7b524532a239b4464",
-                "sha256:716a9973a2cc963160394f701964fe25012600f3d311f60c790400b00e568b61",
-                "sha256:72c1b0fe8fe451b34f12dce46445ddf14bd2a5bcad7e324987194dc8e3a74c86",
-                "sha256:73bd45e1488c40b63fe5a7df892baf9e2a4d4bb6409a2b3b78ac1c6236178e01",
-                "sha256:74739ba8e4e38221d2c5c03d90a7e542cb8ad681915f4ca8f68d04f810ee0a87",
-                "sha256:765bb588c86e47d0b68f23c1bee323d4b703218037765dcf3f25c838c6fecceb",
-                "sha256:79b2ffbba483f4ed36a0f236ccb85fbb16e670c9238313709638167670ba235f",
-                "sha256:7d536ee086b23fecc36c2073c371572374ff50ef4db515e4e503925361c24f71",
-                "sha256:7edf5c043c062462f09b6820de9854bf28cc6cc5b6714b383149745e287181a8",
-                "sha256:82d664628865abeb32d90ae497fb93df398a69bb3434463d172b80fc25b0dd7d",
-                "sha256:836b42f472a0e006e02499cef9352ce8097f33df43baaba3e0a28a964c26c7d2",
-                "sha256:8bd7eb96a675f18aa5c553eb7ddc24a43c8c18f22e1f9925528128c052cdbe00",
-                "sha256:8fc5d5cda37f62b262405cf9652cf0856839c4be8ee41be0afe8858f17f4c94b",
-                "sha256:912a7e8375a1c9a68325a902f3953191b7b292aa3c3fb0d71a216221deca460b",
-                "sha256:9537c2777167488d539bc5de2ad262efc44388230e5118868e172dd4a552b146",
-                "sha256:960d67d0611f4c87da7e2ae2eacf7ea81a5be967861e0c63cf205215afbfac59",
-                "sha256:974c5336e61d6e7eb1ea5b929cb645e882aadab0095c5a6974a111e6479f8878",
-                "sha256:99886d98e1643269760e5fe0df31e5ae7050788dd288947f7f007209b8c33f08",
-                "sha256:9a19e85cc503d958abe5218953df722748d87172f71b73cf3c9257a91b999890",
-                "sha256:9a5af342e34f7e97caf8c995864c7a396418ae2859cc6fdf1b1073020d516a7e",
-                "sha256:9b35db7ce1cd71d36ba24f80f0c9e7cff73a28d7a74e91fe83e23d27c7828750",
-                "sha256:9ccec739a99e4ccf664ea0775149f2749b8a6418eb5b8384b4dc0a7d15d304cb",
-                "sha256:a0fd1bad056a3600047fb9462cff4c5322cebc59ebf5d0a3725e0ee78955001d",
-                "sha256:a26f205c9ca5829cbf82bb2a84b5c36f7184c4316617d7ef1b271a56720d6b30",
-                "sha256:a47f2abb4e29b3a8d0b530f7c3598badc6b134562b1a5caee867f7c62fee51e3",
-                "sha256:a6f86e4193bb0e235ef6ce3dde5cbabed887e0b11f516ce8a0f4d3b33078ec2d",
-                "sha256:aa51e147a66b2d74de1e6e2cf5921890de6b0f4820b257465101d7f37b49fb5a",
-                "sha256:aa57daa5917f1738064f302bf2626281a1cb01920c32f711fbc7bc36111058a8",
-                "sha256:ac64b6478722eeb7a3313d494f8342ef3478dff539d17002f849101b212ef97c",
-                "sha256:acd03d224b0175f5a850edc104ac19040d35419eddad04e7cf2d5986d98427f1",
-                "sha256:af369aa35ee34f132fcfad5be45fbfcde0e3a5f6a1ec0712857f286b7d20cca9",
-                "sha256:b0d5ce521d1dd7d620198829b87ea002956e4319002ef0bc8d3e6d045cb4646e",
-                "sha256:b3950f11058310008a87757f3eee16a8e1ca97979833239439586857bc25482e",
-                "sha256:b8c05e4c8e5f36e5e088caa1bf78a687528f83c043706640a92cb76cd6999384",
-                "sha256:bcacfad3185a623fa11ea0e0634aac7b691aa925d50a440f39b458e41c561d98",
-                "sha256:bd8c4e58ad14b4fa7802b8be49d47993182fdd4023393899632c88fd8cd994eb",
-                "sha256:bfe2b675cf0aaa6d61bf8fbffd3c274b3c9b7b1623beb3809df8a81399a4a9c4",
-                "sha256:c0303e597eb5a5321b4de9c68e9845ac8f290d2ab3f3e2c864437d3c5a30cd65",
-                "sha256:c193dda2b6d49f4c4398962810fa7d7c78f032bf45572b3e04dd5249dff27e08",
-                "sha256:c70db4a0ab5ab20878432c40563573229a7ed9241506181bba12f6b7d0dc41cb",
-                "sha256:cbb65198a9132ebc334f237d7b0df163e4de83fb4f2bdfe46c1e654bdb0c5d43",
-                "sha256:cc4df77d638aa2ed703b878dd093725b72a824c3c546c076e8fdf276f78ee84a",
-                "sha256:ce48b2fece5aeb45265bb7a58259f45027db0abff478e3077e12b05b17fb9da7",
-                "sha256:cea3dbd15aea1341ea2de490574a4a37ca080b2ae24e4b4f4b51b9057b4c3630",
-                "sha256:d1a81c85417b914139e3a9b995d4a1c84559afc839a93cf2cb7f15e6e5f6ed2d",
-                "sha256:d50ac7627b3a1bd2dcef6f9da89a772694ec04d9a61b66cf87f7d9446b4a0c31",
-                "sha256:dab46c723eeb2c255a64f9dc05b8dd601fde66d6b19cdb82b2e09cc6ff8d8b5d",
-                "sha256:dfcebf56f703cb2e346315431699f00db126d158455e513bd14089d992101e44",
-                "sha256:e22b9a99741294b2571667c07d9f8cceec07cb92aae5ccda39ea1b6052ed4319",
-                "sha256:e2cdfaaec6a2f9327bf43c933c0319a7c429058e8537c508964a133dffee412e",
-                "sha256:e4389e06714cfa9d47ab87f784a7c5be91d3934cd6e9a7b85beef808297cc025",
-                "sha256:e793a9f01b3e8b5c0bc646fb59140ce0efcc580d22a3468d70766091beb81b35",
-                "sha256:ee80eeda5e2a4e660651370ebffd1286542b67e268aa1ac8d6dbe973120ef7ee",
-                "sha256:f2038310bc582f3d6a09b3816ab01737d60bf7b1ec70f5356b09e84fb7408ab1",
-                "sha256:f22dac33bb3ee8fe3e013aa7b91dc12f60d61d05b7fe32191ffa84c3aafe77bd",
-                "sha256:f34560fb1b4c3e30ba35fa9a13894ba39e5acfc5f60f57d8accde65f46cc5e74",
-                "sha256:f3f4410a0a601d349dd406b5713fec59b4cee7e71678d5b17edda7f4655a940b",
-                "sha256:f89f65d85774f1797239693cef07ad4c97fdd0639544bad9ac4b869782eb1981",
-                "sha256:fe2365ae915a1fafd982c146754e1de6ab3478def8a59c86e1f7242d794f97d5"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==1.7.0"
-        },
         "fsspec": {
             "hashes": [
                 "sha256:786120687ffa54b8283d942929540d8bc5ccfa820deb555a2b5d0ed2b737bf58",
@@ -2355,110 +2121,6 @@
             "markers": "python_version >= '3.9'",
             "version": "==0.22.1"
         },
-        "propcache": {
-            "hashes": [
-                "sha256:035e631be25d6975ed87ab23153db6a73426a48db688070d925aa27e996fe93c",
-                "sha256:03c89c1b14a5452cf15403e291c0ccd7751d5b9736ecb2c5bab977ad6c5bcd81",
-                "sha256:06766d8f34733416e2e34f46fea488ad5d60726bb9481d3cddf89a6fa2d9603f",
-                "sha256:0a2f2235ac46a7aa25bdeb03a9e7060f6ecbd213b1f9101c43b3090ffb971ef6",
-                "sha256:0b504d29f3c47cf6b9e936c1852246c83d450e8e063d50562115a6be6d3a2535",
-                "sha256:0b8d2f607bd8f80ddc04088bc2a037fdd17884a6fcadc47a96e334d72f3717be",
-                "sha256:0cc17efde71e12bbaad086d679ce575268d70bc123a5a71ea7ad76f70ba30bba",
-                "sha256:0d0fda578d1dc3f77b6b5a5dce3b9ad69a8250a891760a548df850a5e8da87f3",
-                "sha256:156c03d07dc1323d8dacaa221fbe028c5c70d16709cdd63502778e6c3ccca1b0",
-                "sha256:1f43837d4ca000243fd7fd6301947d7cb93360d03cd08369969450cc6b2ce3b4",
-                "sha256:20d7d62e4e7ef05f221e0db2856b979540686342e7dd9973b815599c7057e168",
-                "sha256:2183111651d710d3097338dd1893fcf09c9f54e27ff1a8795495a16a469cc90b",
-                "sha256:21d8759141a9e00a681d35a1f160892a36fb6caa715ba0b832f7747da48fb6ea",
-                "sha256:22d9962a358aedbb7a2e36187ff273adeaab9743373a272976d2e348d08c7770",
-                "sha256:261df2e9474a5949c46e962065d88eb9b96ce0f2bd30e9d3136bcde84befd8f2",
-                "sha256:261fa020c1c14deafd54c76b014956e2f86991af198c51139faf41c4d5e83892",
-                "sha256:28710b0d3975117239c76600ea351934ac7b5ff56e60953474342608dbbb6154",
-                "sha256:2a4092e8549031e82facf3decdbc0883755d5bbcc62d3aea9d9e185549936dcf",
-                "sha256:2ca6d378f09adb13837614ad2754fa8afaee330254f404299611bce41a8438cb",
-                "sha256:310d11aa44635298397db47a3ebce7db99a4cc4b9bbdfcf6c98a60c8d5261cf1",
-                "sha256:31248e44b81d59d6addbb182c4720f90b44e1efdc19f58112a3c3a1615fb47ef",
-                "sha256:34a624af06c048946709f4278b4176470073deda88d91342665d95f7c6270fbe",
-                "sha256:36c8d9b673ec57900c3554264e630d45980fd302458e4ac801802a7fd2ef7897",
-                "sha256:3def3da3ac3ce41562d85db655d18ebac740cb3fa4367f11a52b3da9d03a5cc3",
-                "sha256:404d70768080d3d3bdb41d0771037da19d8340d50b08e104ca0e7f9ce55fce70",
-                "sha256:4445542398bd0b5d32df908031cb1b30d43ac848e20470a878b770ec2dcc6330",
-                "sha256:46d7f8aa79c927e5f987ee3a80205c987717d3659f035c85cf0c3680526bdb44",
-                "sha256:4927842833830942a5d0a56e6f4839bc484785b8e1ce8d287359794818633ba0",
-                "sha256:4adfb44cb588001f68c5466579d3f1157ca07f7504fc91ec87862e2b8e556b88",
-                "sha256:4ba3fef1c30f306b1c274ce0b8baaa2c3cdd91f645c48f06394068f37d3837a1",
-                "sha256:4c1396592321ac83157ac03a2023aa6cc4a3cc3cfdecb71090054c09e5a7cce3",
-                "sha256:4c181cad81158d71c41a2bce88edce078458e2dd5ffee7eddd6b05da85079f43",
-                "sha256:54e02207c79968ebbdffc169591009f4474dde3b4679e16634d34c9363ff56b4",
-                "sha256:55780d5e9a2ddc59711d727226bb1ba83a22dd32f64ee15594b9392b1f544eb1",
-                "sha256:55ffda449a507e9fbd4aca1a7d9aa6753b07d6166140e5a18d2ac9bc49eac220",
-                "sha256:5745bc7acdafa978ca1642891b82c19238eadc78ba2aaa293c6863b304e552d7",
-                "sha256:59d61f6970ecbd8ff2e9360304d5c8876a6abd4530cb752c06586849ac8a9dc9",
-                "sha256:5f559e127134b07425134b4065be45b166183fdcb433cb6c24c8e4149056ad50",
-                "sha256:5f57aa0847730daceff0497f417c9de353c575d8da3579162cc74ac294c5369e",
-                "sha256:6107ddd08b02654a30fb8ad7a132021759d750a82578b94cd55ee2772b6ebea2",
-                "sha256:62180e0b8dbb6b004baec00a7983e4cc52f5ada9cd11f48c3528d8cfa7b96a66",
-                "sha256:62b4239611205294cc433845b914131b2a1f03500ff3c1ed093ed216b82621e1",
-                "sha256:64a67fb39229a8a8491dd42f864e5e263155e729c2e7ff723d6e25f596b1e8cb",
-                "sha256:6d8f3f0eebf73e3c0ff0e7853f68be638b4043c65a70517bb575eff54edd8dbe",
-                "sha256:7046e79b989d7fe457bb755844019e10f693752d169076138abf17f31380800c",
-                "sha256:70bd8b9cd6b519e12859c99f3fc9a93f375ebd22a50296c3a295028bea73b9e7",
-                "sha256:7435d766f978b4ede777002e6b3b6641dd229cd1da8d3d3106a45770365f9ad9",
-                "sha256:74413c0ba02ba86f55cf60d18daab219f7e531620c15f1e23d95563f505efe7e",
-                "sha256:76cace5d6b2a54e55b137669b30f31aa15977eeed390c7cbfb1dafa8dfe9a701",
-                "sha256:7a2368eed65fc69a7a7a40b27f22e85e7627b74216f0846b04ba5c116e191ec9",
-                "sha256:7a4f30862869fa2b68380d677cc1c5fcf1e0f2b9ea0cf665812895c75d0ca3b8",
-                "sha256:7ca3aee1aa955438c4dba34fc20a9f390e4c79967257d830f137bd5a8a32ed3b",
-                "sha256:7f08f1cc28bd2eade7a8a3d2954ccc673bb02062e3e7da09bc75d843386b342f",
-                "sha256:85871b050f174bc0bfb437efbdb68aaf860611953ed12418e4361bc9c392749e",
-                "sha256:8a08154613f2249519e549de2330cf8e2071c2887309a7b07fb56098f5170a02",
-                "sha256:8a544caaae1ac73f1fecfae70ded3e93728831affebd017d53449e3ac052ac1e",
-                "sha256:8cabf5b5902272565e78197edb682017d21cf3b550ba0460ee473753f28d23c1",
-                "sha256:8de106b6c84506b31c27168582cd3cb3000a6412c16df14a8628e5871ff83c10",
-                "sha256:92b69e12e34869a6970fd2f3da91669899994b47c98f5d430b781c26f1d9f387",
-                "sha256:9704bedf6e7cbe3c65eca4379a9b53ee6a83749f047808cbb5044d40d7d72198",
-                "sha256:98f1ec44fb675f5052cccc8e609c46ed23a35a1cfd18545ad4e29002d858a43f",
-                "sha256:9a3cf035bbaf035f109987d9d55dc90e4b0e36e04bbbb95af3055ef17194057b",
-                "sha256:9bec58347a5a6cebf239daba9bda37dffec5b8d2ce004d9fe4edef3d2815137e",
-                "sha256:9da1cf97b92b51253d5b68cf5a2b9e0dafca095e36b7f2da335e27dc6172a614",
-                "sha256:9ecb0aad4020e275652ba3975740f241bd12a61f1a784df044cf7477a02bc252",
-                "sha256:a2dc1f4a1df4fecf4e6f68013575ff4af84ef6f478fe5344317a65d38a8e6dc9",
-                "sha256:a7fad897f14d92086d6b03fdd2eb844777b0c4d7ec5e3bac0fbae2ab0602bbe5",
-                "sha256:ab50cef01b372763a13333b4e54021bdcb291fc9a8e2ccb9c2df98be51bcde6c",
-                "sha256:abb7fa19dbf88d3857363e0493b999b8011eea856b846305d8c0512dfdf8fbb1",
-                "sha256:acdf05d00696bc0447e278bb53cb04ca72354e562cf88ea6f9107df8e7fd9770",
-                "sha256:aff2e4e06435d61f11a428360a932138d0ec288b0a31dd9bd78d200bd4a2b339",
-                "sha256:b77ec3c257d7816d9f3700013639db7491a434644c906a2578a11daf13176251",
-                "sha256:bca54bd347a253af2cf4544bbec232ab982f4868de0dd684246b67a51bc6b1db",
-                "sha256:be29c4f4810c5789cf10ddf6af80b041c724e629fa51e308a7a0fb19ed1ef7bf",
-                "sha256:c0075bf773d66fa8c9d41f66cc132ecc75e5bb9dd7cce3cfd14adc5ca184cb95",
-                "sha256:c144ca294a204c470f18cf4c9d78887810d04a3e2fbb30eea903575a779159df",
-                "sha256:c5c2a784234c28854878d68978265617aa6dc0780e53d44b4d67f3651a17a9a2",
-                "sha256:ca592ed634a73ca002967458187109265e980422116c0a107cf93d81f95af945",
-                "sha256:cab90ac9d3f14b2d5050928483d3d3b8fb6b4018893fc75710e6aa361ecb2474",
-                "sha256:cc2782eb0f7a16462285b6f8394bbbd0e1ee5f928034e941ffc444012224171b",
-                "sha256:ce26862344bdf836650ed2487c3d724b00fbfec4233a1013f597b78c1cb73615",
-                "sha256:ce2ac2675a6aa41ddb2a0c9cbff53780a617ac3d43e620f8fd77ba1c84dcfc06",
-                "sha256:d1a342c834734edb4be5ecb1e9fb48cb64b1e2320fccbd8c54bf8da8f2a84c33",
-                "sha256:d4a996adb6904f85894570301939afeee65f072b4fd265ed7e569e8d9058e4ec",
-                "sha256:d81ac3ae39d38588ad0549e321e6f773a4e7cc68e7751524a22885d5bbadf886",
-                "sha256:db429c19a6c7e8a1c320e6a13c99799450f411b02251fb1b75e6217cf4a14fcb",
-                "sha256:df4a81b9b53449ebc90cc4deefb052c1dd934ba85012aa912c7ea7b7e38b60c1",
-                "sha256:e41671f1594fc4ab0a6dec1351864713cb3a279910ae8b58f884a88a0a632c05",
-                "sha256:e514326b79e51f0a177daab1052bc164d9d9e54133797a3a58d24c9c87a3fe6d",
-                "sha256:e53af8cb6a781b02d2ea079b5b853ba9430fcbe18a8e3ce647d5982a3ff69f39",
-                "sha256:ee6f22b6eaa39297c751d0e80c0d3a454f112f5c6481214fcf4c092074cecd67",
-                "sha256:eef914c014bf72d18efb55619447e0aecd5fb7c2e3fa7441e2e5d6099bddff7e",
-                "sha256:f066b437bb3fa39c58ff97ab2ca351db465157d68ed0440abecb21715eb24b28",
-                "sha256:f1304b085c83067914721e7e9d9917d41ad87696bf70f0bc7dee450e9c71ad0a",
-                "sha256:f86e5d7cd03afb3a1db8e9f9f6eff15794e79e791350ac48a8c924e6f439f394",
-                "sha256:fad3b2a085ec259ad2c2842666b2a0a49dea8463579c606426128925af1ed725",
-                "sha256:fb075ad271405dcad8e2a7ffc9a750a3bf70e533bd86e89f0603e607b93aa64c",
-                "sha256:fd3e6019dc1261cd0291ee8919dd91fbab7b169bb76aeef6c716833a3f65d206"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==0.3.2"
-        },
         "protobuf": {
             "hashes": [
                 "sha256:0414e3aa5a5f3ff423828e1e6a6e907d6c65c1d5b7e6e975793d5590bdeecc16",
@@ -3198,12 +2860,12 @@
         },
         "s3fs": {
             "hashes": [
-                "sha256:5e7f9ec0cad7745155e3eb86fae15b1481fa29946bf5b3a4ce3a60701ce6022d",
-                "sha256:b6b2d3f84b6aa1c2ba5e62e39dd9410cf54f10a2cce1ea6db1ba0d1a6bcce685"
+                "sha256:2ca5de8dc18ad7ad350c0bd01aef0406aa5d0fff78a561f0f710f9d9858abdd0",
+                "sha256:91c1dfb45e5217bd441a7a560946fe865ced6225ff7eb0fb459fe6e601a95ed3"
             ],
             "index": "pypi",
-            "markers": "python_version >= '3.9'",
-            "version": "==2025.7.0"
+            "markers": "python_version >= '3.5'",
+            "version": "==0.4.2"
         },
         "s3transfer": {
             "hashes": [
@@ -4100,116 +3762,6 @@
             "markers": "python_version >= '3.10'",
             "version": "==3.0.3"
         },
-        "yarl": {
-            "hashes": [
-                "sha256:03aa1e041727cb438ca762628109ef1333498b122e4c76dd858d186a37cec845",
-                "sha256:041eaa14f73ff5a8986b4388ac6bb43a77f2ea09bf1913df7a35d4646db69e53",
-                "sha256:0b5ff0fbb7c9f1b1b5ab53330acbfc5247893069e7716840c8e7d5bb7355038a",
-                "sha256:0c869f2651cc77465f6cd01d938d91a11d9ea5d798738c1dc077f3de0b5e5fed",
-                "sha256:1112ae8154186dfe2de4732197f59c05a83dc814849a5ced892b708033f40dc2",
-                "sha256:11a62c839c3a8eac2410e951301309426f368388ff2f33799052787035793b02",
-                "sha256:12e768f966538e81e6e7550f9086a6236b16e26cd964cf4df35349970f3551cf",
-                "sha256:14a85f3bd2d7bb255be7183e5d7d6e70add151a98edf56a770d6140f5d5f4010",
-                "sha256:14f326acd845c2b2e2eb38fb1346c94f7f3b01a4f5c788f8144f9b630bfff9a3",
-                "sha256:1c48912653e63aef91ff988c5432832692ac5a1d8f0fb8a33091520b5bbe19ef",
-                "sha256:1c92f4390e407513f619d49319023664643d3339bd5e5a56a3bebe01bc67ec04",
-                "sha256:1f8a891e4a22a89f5dde7862994485e19db246b70bb288d3ce73a34422e55b23",
-                "sha256:21242b4288a6d56f04ea193adde174b7e347ac46ce6bc84989ff7c1b1ecea84e",
-                "sha256:255b468adf57b4a7b65d8aad5b5138dce6a0752c139965711bdcb81bc370e1b6",
-                "sha256:26ef53a9e726e61e9cd1cda6b478f17e350fb5800b4bd1cd9fe81c4d91cfeb2e",
-                "sha256:2c26b0c49220d5799f7b22c6838409ee9bc58ee5c95361a4d7831f03cc225b5a",
-                "sha256:2c7b34d804b8cf9b214f05015c4fee2ebe7ed05cf581e7192c06555c71f4446a",
-                "sha256:2c89b5c792685dd9cd3fa9761c1b9f46fc240c2a3265483acc1565769996a3f8",
-                "sha256:30c41ad5d717b3961b2dd785593b67d386b73feca30522048d37298fee981805",
-                "sha256:33f29ecfe0330c570d997bcf1afd304377f2e48f61447f37e846a6058a4d33b2",
-                "sha256:344d1103e9c1523f32a5ed704d576172d2cabed3122ea90b1d4e11fe17c66458",
-                "sha256:377fae2fef158e8fd9d60b4c8751387b8d1fb121d3d0b8e9b0be07d1b41e83dc",
-                "sha256:3cf34efa60eb81dd2645a2e13e00bb98b76c35ab5061a3989c7a70f78c85006d",
-                "sha256:41493b9b7c312ac448b7f0a42a089dffe1d6e6e981a2d76205801a023ed26a2b",
-                "sha256:41ebd28167bc6af8abb97fec1a399f412eec5fd61a3ccbe2305a18b84fb4ca73",
-                "sha256:468f6e40285de5a5b3c44981ca3a319a4b208ccc07d526b20b12aeedcfa654b7",
-                "sha256:46b5e0ccf1943a9a6e766b2c2b8c732c55b34e28be57d8daa2b3c1d1d4009309",
-                "sha256:47ee6188fea634bdfaeb2cc420f5b3b17332e6225ce88149a17c413c77ff269e",
-                "sha256:48ea7d7f9be0487339828a4de0360d7ce0efc06524a48e1810f945c45b813698",
-                "sha256:495b4ef2fea40596bfc0affe3837411d6aa3371abcf31aac0ccc4bdd64d4ef5c",
-                "sha256:49bdd1b8e00ce57e68ba51916e4bb04461746e794e7c4d4bbc42ba2f18297691",
-                "sha256:4a979218c1fdb4246a05efc2cc23859d47c89af463a90b99b7c56094daf25a16",
-                "sha256:4c3ae28f3ae1563c50f3d37f064ddb1511ecc1d5584e88c6b7c63cf7702a6d5f",
-                "sha256:541d050a355bbbc27e55d906bc91cb6fe42f96c01413dd0f4ed5a5240513874f",
-                "sha256:564ab3d517e3d01c408c67f2e5247aad4019dcf1969982aba3974b4093279004",
-                "sha256:56dac5f452ed25eef0f6e3c6a066c6ab68971d96a9fb441791cad0efba6140d3",
-                "sha256:57edc88517d7fc62b174fcfb2e939fbc486a68315d648d7e74d07fac42cec240",
-                "sha256:59174e7332f5d153d8f7452a102b103e2e74035ad085f404df2e40e663a22b28",
-                "sha256:595c07bc79af2494365cc96ddeb772f76272364ef7c80fb892ef9d0649586513",
-                "sha256:597f40615b8d25812f14562699e287f0dcc035d25eb74da72cae043bb884d773",
-                "sha256:59febc3969b0781682b469d4aca1a5cab7505a4f7b85acf6db01fa500fa3f6ba",
-                "sha256:6032e6da6abd41e4acda34d75a816012717000fa6839f37124a47fcefc49bec4",
-                "sha256:62915e6688eb4d180d93840cda4110995ad50c459bf931b8b3775b37c264af1e",
-                "sha256:642980ef5e0fa1de5fa96d905c7e00cb2c47cb468bfcac5a18c58e27dbf8d8d1",
-                "sha256:66252d780b45189975abfed839616e8fd2dbacbdc262105ad7742c6ae58f3e31",
-                "sha256:67e708dfb8e78d8a19169818eeb5c7a80717562de9051bf2413aca8e3696bf16",
-                "sha256:680e19c7ce3710ac4cd964e90dad99bf9b5029372ba0c7cbfcd55e54d90ea819",
-                "sha256:69e9b141de5511021942a6866990aea6d111c9042235de90e08f94cf972ca03d",
-                "sha256:69ff8439d8ba832d6bed88af2c2b3445977eba9a4588b787b32945871c2444e3",
-                "sha256:6c4fbf6b02d70e512d7ade4b1f998f237137f1417ab07ec06358ea04f69134f8",
-                "sha256:6f3eff4cc3f03d650d8755c6eefc844edde99d641d0dcf4da3ab27141a5f8ddf",
-                "sha256:749d73611db8d26a6281086f859ea7ec08f9c4c56cec864e52028c8b328db723",
-                "sha256:76d12524d05841276b0e22573f28d5fbcb67589836772ae9244d90dd7d66aa13",
-                "sha256:793fd0580cb9664548c6b83c63b43c477212c0260891ddf86809e1c06c8b08f1",
-                "sha256:7a8900a42fcdaad568de58887c7b2f602962356908eedb7628eaf6021a6e435b",
-                "sha256:7bdd2f80f4a7df852ab9ab49484a4dee8030023aa536df41f2d922fd57bf023f",
-                "sha256:812303eb4aa98e302886ccda58d6b099e3576b1b9276161469c25803a8db277d",
-                "sha256:835ab2cfc74d5eb4a6a528c57f05688099da41cf4957cf08cad38647e4a83b30",
-                "sha256:83b8eb083fe4683c6115795d9fc1cfaf2cbbefb19b3a1cb68f6527460f483a77",
-                "sha256:8570d998db4ddbfb9a590b185a0a33dbf8aafb831d07a5257b4ec9948df9cb0a",
-                "sha256:8601bc010d1d7780592f3fc1bdc6c72e2b6466ea34569778422943e1a1f3c389",
-                "sha256:86971e2795584fe8c002356d3b97ef6c61862720eeff03db2a7c86b678d85b3e",
-                "sha256:88cab98aa4e13e1ade8c141daeedd300a4603b7132819c484841bb7af3edce9e",
-                "sha256:8e0fe9364ad0fddab2688ce72cb7a8e61ea42eff3c7caeeb83874a5d479c896c",
-                "sha256:8f64fbf81878ba914562c672024089e3401974a39767747691c65080a67b18c1",
-                "sha256:8f969afbb0a9b63c18d0feecf0db09d164b7a44a053e78a7d05f5df163e43833",
-                "sha256:909313577e9619dcff8c31a0ea2aa0a2a828341d92673015456b3ae492e7317b",
-                "sha256:90bbd29c4fe234233f7fa2b9b121fb63c321830e5d05b45153a2ca68f7d310ee",
-                "sha256:9427925776096e664c39e131447aa20ec738bdd77c049c48ea5200db2237e000",
-                "sha256:97c75596019baae7c71ccf1d8cc4738bc08134060d0adfcbe5642f778d1dca38",
-                "sha256:98c4a7d166635147924aa0bf9bfe8d8abad6fffa6102de9c99ea04a1376f91e8",
-                "sha256:a97d67108e79cfe22e2b430d80d7571ae57d19f17cda8bb967057ca8a7bf5bfd",
-                "sha256:aef6c4d69554d44b7f9d923245f8ad9a707d971e6209d51279196d8e8fe1ae16",
-                "sha256:b121ff6a7cbd4abc28985b6028235491941b9fe8fe226e6fdc539c977ea1739d",
-                "sha256:b29a2c385a5f5b9c7d9347e5812b6f7ab267193c62d282a540b4fc528c8a9d2a",
-                "sha256:b5f307337819cdfdbb40193cad84978a029f847b0a357fbe49f712063cfc4f06",
-                "sha256:b982fa7f74c80d5c0c7b5b38f908971e513380a10fecea528091405f519b9ebb",
-                "sha256:bad6d131fda8ef508b36be3ece16d0902e80b88ea7200f030a0f6c11d9e508d4",
-                "sha256:bdcc4cd244e58593a4379fe60fdee5ac0331f8eb70320a24d591a3be197b94a9",
-                "sha256:bea21cdae6c7eb02ba02a475f37463abfe0a01f5d7200121b03e605d6a0439f8",
-                "sha256:c03bfebc4ae8d862f853a9757199677ab74ec25424d0ebd68a0027e9c639a390",
-                "sha256:c5e9642f27036283550f5f57dc6156c51084b458570b9d0d96100c8bebb186a8",
-                "sha256:c7d7f497126d65e2cad8dc5f97d34c27b19199b6414a40cb36b52f41b79014be",
-                "sha256:c7ddf7a09f38667aea38801da8b8d6bfe81df767d9dfc8c88eb45827b195cd1c",
-                "sha256:d017a4997ee50c91fd5466cef416231bb82177b93b029906cefc542ce14c35ac",
-                "sha256:d0f6500f69e8402d513e5eedb77a4e1818691e8f45e6b687147963514d84b44b",
-                "sha256:d1a4fbb50e14396ba3d375f68bfe02215d8e7bc3ec49da8341fe3157f59d2ff5",
-                "sha256:d25ddcf954df1754ab0f86bb696af765c5bfaba39b74095f27eececa049ef9a4",
-                "sha256:d2b6fb3622b7e5bf7a6e5b679a69326b4279e805ed1699d749739a61d242449e",
-                "sha256:daadbdc1f2a9033a2399c42646fbd46da7992e868a5fe9513860122d7fe7a73f",
-                "sha256:dab096ce479d5894d62c26ff4f699ec9072269d514b4edd630a393223f45a0ee",
-                "sha256:daea0d313868da1cf2fac6b2d3a25c6e3a9e879483244be38c8e6a41f1d876a5",
-                "sha256:dd803820d44c8853a109a34e3660e5a61beae12970da479cf44aa2954019bf70",
-                "sha256:df018d92fe22aaebb679a7f89fe0c0f368ec497e3dda6cb81a567610f04501f1",
-                "sha256:df47c55f7d74127d1b11251fe6397d84afdde0d53b90bedb46a23c0e534f9d24",
-                "sha256:e3968ec7d92a0c0f9ac34d5ecfd03869ec0cab0697c91a45db3fbbd95fe1b653",
-                "sha256:e42ba79e2efb6845ebab49c7bf20306c4edf74a0b20fc6b2ccdd1a219d12fad3",
-                "sha256:eae7bfe2069f9c1c5b05fc7fe5d612e5bbc089a39309904ee8b829e322dcad00",
-                "sha256:f5a5928ff5eb13408c62a968ac90d43f8322fd56d87008b8f9dabf3c0f6ee983",
-                "sha256:f60233b98423aab21d249a30eb27c389c14929f47be8430efa7dbd91493a729d",
-                "sha256:f60e4ad5db23f0b96e49c018596707c3ae89f5d0bd97f0ad3684bcbad899f1e7",
-                "sha256:f6342d643bf9a1de97e512e45e4b9560a043347e779a173250824f8b254bd5ce",
-                "sha256:fe41919b9d899661c5c28a8b4b0acf704510b88f27f0934ac7a7bebdd8938d5e",
-                "sha256:ff70f32aa316393eaf8222d518ce9118148eddb8a53073c2403863b41033eed5"
-            ],
-            "markers": "python_version >= '3.9'",
-            "version": "==1.20.1"
-        },
         "zipp": {
             "hashes": [
                 "sha256:071652d6115ed432f5ce1d34c336c0adfd6a884660d1e9712a256d3d3bd4b14e",
@@ -4256,6 +3808,43 @@
             "markers": "python_version >= '3.9'",
             "version": "==3.1.1"
         },
+        "black": {
+            "hashes": [
+                "sha256:030b9759066a4ee5e5aca28c3c77f9c64789cdd4de8ac1df642c40b708be6171",
+                "sha256:055e59b198df7ac0b7efca5ad7ff2516bca343276c466be72eb04a3bcc1f82d7",
+                "sha256:0e519ecf93120f34243e6b0054db49c00a35f84f195d5bce7e9f5cfc578fc2da",
+                "sha256:172b1dbff09f86ce6f4eb8edf9dede08b1fce58ba194c87d7a4f1a5aa2f5b3c2",
+                "sha256:1e2978f6df243b155ef5fa7e558a43037c3079093ed5d10fd84c43900f2d8ecc",
+                "sha256:33496d5cd1222ad73391352b4ae8da15253c5de89b93a80b3e2c8d9a19ec2666",
+                "sha256:3b48735872ec535027d979e8dcb20bf4f70b5ac75a8ea99f127c106a7d7aba9f",
+                "sha256:4b60580e829091e6f9238c848ea6750efed72140b91b048770b64e74fe04908b",
+                "sha256:759e7ec1e050a15f89b770cefbf91ebee8917aac5c20483bc2d80a6c3a04df32",
+                "sha256:8f0b18a02996a836cc9c9c78e5babec10930862827b1b724ddfe98ccf2f2fe4f",
+                "sha256:95e8176dae143ba9097f351d174fdaf0ccd29efb414b362ae3fd72bf0f710717",
+                "sha256:96c1c7cd856bba8e20094e36e0f948718dc688dba4a9d78c3adde52b9e6c2299",
+                "sha256:a1ee0a0c330f7b5130ce0caed9936a904793576ef4d2b98c40835d6a65afa6a0",
+                "sha256:a22f402b410566e2d1c950708c77ebf5ebd5d0d88a6a2e87c86d9fb48afa0d18",
+                "sha256:a39337598244de4bae26475f77dda852ea00a93bd4c728e09eacd827ec929df0",
+                "sha256:afebb7098bfbc70037a053b91ae8437c3857482d3a690fefc03e9ff7aa9a5fd3",
+                "sha256:bacabb307dca5ebaf9c118d2d2f6903da0d62c9faa82bd21a33eecc319559355",
+                "sha256:bce2e264d59c91e52d8000d507eb20a9aca4a778731a08cfff7e5ac4a4bb7096",
+                "sha256:d9e6827d563a2c820772b32ce8a42828dc6790f095f441beef18f96aa6f8294e",
+                "sha256:db8ea9917d6f8fc62abd90d944920d95e73c83a5ee3383493e35d271aca872e9",
+                "sha256:ea0213189960bda9cf99be5b8c8ce66bb054af5e9e861249cd23471bd7b0b3ba",
+                "sha256:f3df5f1bf91d36002b0a75389ca8663510cf0531cca8aa5c1ef695b46d98655f"
+            ],
+            "index": "pypi",
+            "markers": "python_version >= '3.9'",
+            "version": "==25.1.0"
+        },
+        "click": {
+            "hashes": [
+                "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2",
+                "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a"
+            ],
+            "markers": "python_version >= '3.7'",
+            "version": "==8.1.8"
+        },
         "comm": {
             "hashes": [
                 "sha256:2dc8048c10962d55d7ad693be1e7045d891b7ce8d999c97963a5e3e99c055971",
@@ -4369,6 +3958,14 @@
             "markers": "python_version >= '3.8'",
             "version": "==0.1.7"
         },
+        "mypy-extensions": {
+            "hashes": [
+                "sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505",
+                "sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558"
+            ],
+            "markers": "python_version >= '3.8'",
+            "version": "==1.1.0"
+        },
         "nest-asyncio": {
             "hashes": [
                 "sha256:6f172d5449aca15afd6c646851f4e31e02c598d553a667e38cafa997cfec55fe",
@@ -4393,6 +3990,14 @@
             "markers": "python_version >= '3.6'",
             "version": "==0.8.4"
         },
+        "pathspec": {
+            "hashes": [
+                "sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08",
+                "sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712"
+            ],
+            "markers": "python_version >= '3.8'",
+            "version": "==0.12.1"
+        },
         "pexpect": {
             "hashes": [
                 "sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523",
@@ -4465,88 +4070,101 @@
         },
         "pyzmq": {
             "hashes": [
-                "sha256:00387d12a8af4b24883895f7e6b9495dc20a66027b696536edac35cb988c38f3",
-                "sha256:04cd50ef3b28e35ced65740fb9956a5b3f77a6ff32fcd887e3210433f437dd0f",
-                "sha256:0546a720c1f407b2172cb04b6b094a78773491497e3644863cf5c96c42df8cff",
-                "sha256:096af9e133fec3a72108ddefba1e42985cb3639e9de52cfd336b6fc23aa083e9",
-                "sha256:100f6e5052ba42b2533011d34a018a5ace34f8cac67cb03cfa37c8bdae0ca617",
-                "sha256:10f70c1d9a446a85013a36871a296007f6fe4232b530aa254baf9da3f8328bc0",
-                "sha256:111db5f395e09f7e775f759d598f43cb815fc58e0147623c4816486e1a39dc22",
-                "sha256:14fe7aaac86e4e93ea779a821967360c781d7ac5115b3f1a171ced77065a0174",
-                "sha256:15f39d50bd6c9091c67315ceb878a4f531957b121d2a05ebd077eb35ddc5efed",
-                "sha256:1958947983fef513e6e98eff9cb487b60bf14f588dc0e6bf35fa13751d2c8251",
-                "sha256:20d5cb29e8c5f76a127c75b6e7a77e846bc4b655c373baa098c26a61b7ecd0ef",
-                "sha256:21457825249b2a53834fa969c69713f8b5a79583689387a5e7aed880963ac564",
-                "sha256:2524c40891be6a3106885a3935d58452dd83eb7a5742a33cc780a1ad4c49dec0",
-                "sha256:26b72c5ae20bf59061c3570db835edb81d1e0706ff141747055591c4b41193f8",
-                "sha256:26d542258c7a1f35a9cff3d887687d3235006134b0ac1c62a6fe1ad3ac10440e",
-                "sha256:29f44e3c26b9783816ba9ce274110435d8f5b19bbd82f7a6c7612bb1452a3597",
-                "sha256:2c386339d7e3f064213aede5d03d054b237937fbca6dd2197ac8cf3b25a6b14e",
-                "sha256:39ddd3ba0a641f01d8f13a3cfd4c4924eb58e660d8afe87e9061d6e8ca6f7ac3",
-                "sha256:42c7555123679637c99205b1aa9e8f7d90fe29d4c243c719e347d4852545216c",
-                "sha256:4c19d39c04c29a6619adfeb19e3735c421b3bfee082f320662f52e59c47202ba",
-                "sha256:4e7d0a8d460fba526cc047333bdcbf172a159b8bd6be8c3eb63a416ff9ba1477",
-                "sha256:50360fb2a056ffd16e5f4177eee67f1dd1017332ea53fb095fe7b5bf29c70246",
-                "sha256:51f5726de3532b8222e569990c8aa34664faa97038304644679a51d906e60c6e",
-                "sha256:53a48f0228eab6cbf69fde3aa3c03cbe04e50e623ef92ae395fce47ef8a76152",
-                "sha256:55a0155b148fe0428285a30922f7213539aa84329a5ad828bca4bbbc665c70a4",
-                "sha256:56e46bbb85d52c1072b3f809cc1ce77251d560bc036d3a312b96db1afe76db2e",
-                "sha256:5b10bd6f008937705cf6e7bf8b6ece5ca055991e3eb130bca8023e20b86aa9a3",
-                "sha256:5cd11d46d7b7e5958121b3eaf4cd8638eff3a720ec527692132f05a57f14341d",
-                "sha256:5d5ef4718ecab24f785794e0e7536436698b459bfbc19a1650ef55280119d93b",
-                "sha256:60e8cc82d968174650c1860d7b716366caab9973787a1c060cf8043130f7d0f7",
-                "sha256:63af72b2955fc77caf0a77444baa2431fcabb4370219da38e1a9f8d12aaebe28",
-                "sha256:656c1866505a5735d0660b7da6d7147174bbf59d4975fc2b7f09f43c9bc25745",
-                "sha256:661942bc7cd0223d569d808f2e5696d9cc120acc73bf3e88a1f1be7ab648a7e4",
-                "sha256:67855c14173aec36395d7777aaba3cc527b393821f30143fd20b98e1ff31fd38",
-                "sha256:67bfbcbd0a04c575e8103a6061d03e393d9f80ffdb9beb3189261e9e9bc5d5e9",
-                "sha256:6a56e3e5bd2d62a01744fd2f1ce21d760c7c65f030e9522738d75932a14ab62a",
-                "sha256:6ad0562d4e6abb785be3e4dd68599c41be821b521da38c402bc9ab2a8e7ebc7e",
-                "sha256:6b0397b0be277b46762956f576e04dc06ced265759e8c2ff41a0ee1aa0064198",
-                "sha256:6e435540fa1da54667f0026cf1e8407fe6d8a11f1010b7f06b0b17214ebfcf5e",
-                "sha256:7011ade88c8e535cf140f8d1a59428676fbbce7c6e54fefce58bf117aefb6667",
-                "sha256:74175b9e12779382432dd1d1f5960ebe7465d36649b98a06c6b26be24d173fab",
-                "sha256:7cdf07fe0a557b131366f80727ec8ccc4b70d89f1e3f920d94a594d598d754f0",
-                "sha256:8617c7d43cd8ccdb62aebe984bfed77ca8f036e6c3e46dd3dddda64b10f0ab7a",
-                "sha256:88b4e43cab04c3c0f0d55df3b1eef62df2b629a1a369b5289a58f6fa8b07c4f4",
-                "sha256:8c86ea8fe85e2eb0ffa00b53192c401477d5252f6dd1db2e2ed21c1c30d17e5e",
-                "sha256:8ca7e6a0388dd9e1180b14728051068f4efe83e0d2de058b5ff92c63f399a73f",
-                "sha256:90252fa2ff3a104219db1f5ced7032a7b5fc82d7c8d2fec2b9a3e6fd4e25576b",
-                "sha256:9df43a2459cd3a3563404c1456b2c4c69564daa7dbaf15724c09821a3329ce46",
-                "sha256:a20528da85c7ac7a19b7384e8c3f8fa707841fd85afc4ed56eda59d93e3d98ad",
-                "sha256:a979b7cf9e33d86c4949df527a3018767e5f53bc3b02adf14d4d8db1db63ccc0",
-                "sha256:ae2b34bcfaae20c064948a4113bf8709eee89fd08317eb293ae4ebd69b4d9740",
-                "sha256:b1f08eeb9ce1510e6939b6e5dcd46a17765e2333daae78ecf4606808442e52cf",
-                "sha256:b801c2e40c5aa6072c2f4876de8dccd100af6d9918d4d0d7aa54a1d982fd4f44",
-                "sha256:b973ee650e8f442ce482c1d99ca7ab537c69098d53a3d046676a484fd710c87a",
-                "sha256:bf6c6b061efd00404b9750e2cfbd9507492c8d4b3721ded76cb03786131be2ed",
-                "sha256:c0dc628b5493f9a8cd9844b8bee9732ef587ab00002157c9329e4fc0ef4d3afa",
-                "sha256:c0ed2c1f335ba55b5fdc964622254917d6b782311c50e138863eda409fbb3b6d",
-                "sha256:c2dace4a7041cca2fba5357a2d7c97c5effdf52f63a1ef252cfa496875a3762d",
-                "sha256:c36ad534c0c29b4afa088dc53543c525b23c0797e01b69fef59b1a9c0e38b688",
-                "sha256:c45fee3968834cd291a13da5fac128b696c9592a9493a0f7ce0b47fa03cc574d",
-                "sha256:c5817641eebb391a2268c27fecd4162448e03538387093cdbd8bf3510c316b38",
-                "sha256:c644aaacc01d0df5c7072826df45e67301f191c55f68d7b2916d83a9ddc1b551",
-                "sha256:c8878011653dcdc27cc2c57e04ff96f0471e797f5c19ac3d7813a245bcb24371",
-                "sha256:cae73bb6898c4e045fbed5024cb587e4110fddb66f6163bcab5f81f9d4b9c496",
-                "sha256:cb0ac5179cba4b2f94f1aa208fbb77b62c4c9bf24dd446278b8b602cf85fcda3",
-                "sha256:cbabc59dcfaac66655c040dfcb8118f133fb5dde185e5fc152628354c1598e52",
-                "sha256:cd1dc59763effd1576f8368047c9c31468fce0af89d76b5067641137506792ae",
-                "sha256:cf209a6dc4b420ed32a7093642843cbf8703ed0a7d86c16c0b98af46762ebefb",
-                "sha256:d8229f2efece6a660ee211d74d91dbc2a76b95544d46c74c615e491900dc107f",
-                "sha256:d8c6de908465697a8708e4d6843a1e884f567962fc61eb1706856545141d0cbb",
-                "sha256:dc1091f59143b471d19eb64f54bae4f54bcf2a466ffb66fe45d94d8d734eb495",
-                "sha256:dce4199bf5f648a902ce37e7b3afa286f305cd2ef7a8b6ec907470ccb6c8b371",
-                "sha256:e40609380480b3d12c30f841323f42451c755b8fece84235236f5fe5ffca8c1c",
-                "sha256:e8c4adce8e37e75c4215297d7745551b8dcfa5f728f23ce09bf4e678a9399413",
-                "sha256:e918d70862d4cfd4b1c187310015646a14e1f5917922ab45b29f28f345eeb6be",
-                "sha256:ea6d441c513bf18c578c73c323acf7b4184507fc244762193aa3a871333c9045",
-                "sha256:ee05728c0b0b2484a9fc20466fa776fffb65d95f7317a3419985b8c908563861",
-                "sha256:f4162dbbd9c5c84fb930a36f290b08c93e35fce020d768a16fc8891a2f72bab8",
-                "sha256:f7bbe9e1ed2c8d3da736a15694d87c12493e54cc9dc9790796f0321794bbc91f"
+                "sha256:05a94233fdde585eb70924a6e4929202a747eea6ed308a6171c4f1c715bbe39e",
+                "sha256:092f4011b26d6b0201002f439bd74b38f23f3aefcb358621bdc3b230afc9b2d5",
+                "sha256:0ec09073ed67ae236785d543df3b322282acc0bdf6d1b748c3e81f3043b21cb5",
+                "sha256:0f772eea55cccce7f45d6ecdd1d5049c12a77ec22404f6b892fae687faa87bee",
+                "sha256:0fc24bf45e4a454e55ef99d7f5c8b8712539200ce98533af25a5bfa954b6b390",
+                "sha256:119ce8590409702394f959c159d048002cbed2f3c0645ec9d6a88087fc70f0f1",
+                "sha256:1843fd0daebcf843fe6d4da53b8bdd3fc906ad3e97d25f51c3fed44436d82a49",
+                "sha256:19dce6c93656f9c469540350d29b128cd8ba55b80b332b431b9a1e9ff74cfd01",
+                "sha256:1c363c6dc66352331d5ad64bb838765c6692766334a6a02fdb05e76bd408ae18",
+                "sha256:1d59dad4173dc2a111f03e59315c7bd6e73da1a9d20a84a25cf08325b0582b1a",
+                "sha256:1da8e645c655d86f0305fb4c65a0d848f461cd90ee07d21f254667287b5dbe50",
+                "sha256:2329f0c87f0466dce45bba32b63f47018dda5ca40a0085cc5c8558fea7d9fc55",
+                "sha256:27a78bdd384dbbe7b357af95f72efe8c494306b5ec0a03c31e2d53d6763e5307",
+                "sha256:2852f67371918705cc18b321695f75c5d653d5d8c4a9b946c1eec4dab2bd6fdf",
+                "sha256:313a7b374e3dc64848644ca348a51004b41726f768b02e17e689f1322366a4d9",
+                "sha256:351bf5d8ca0788ca85327fda45843b6927593ff4c807faee368cc5aaf9f809c2",
+                "sha256:4401649bfa0a38f0f8777f8faba7cd7eb7b5b8ae2abc7542b830dd09ad4aed0d",
+                "sha256:44909aa3ed2234d69fe81e1dade7be336bcfeab106e16bdaa3318dcde4262b93",
+                "sha256:45c3e00ce16896ace2cd770ab9057a7cf97d4613ea5f2a13f815141d8b6894b9",
+                "sha256:45c549204bc20e7484ffd2555f6cf02e572440ecf2f3bdd60d4404b20fddf64b",
+                "sha256:497bd8af534ae55dc4ef67eebd1c149ff2a0b0f1e146db73c8b5a53d83c1a5f5",
+                "sha256:4b9d8e26fb600d0d69cc9933e20af08552e97cc868a183d38a5c0d661e40dfbb",
+                "sha256:4bca8abc31799a6f3652d13f47e0b0e1cab76f9125f2283d085a3754f669b607",
+                "sha256:4c3874344fd5fa6d58bb51919708048ac4cab21099f40a227173cddb76b4c20b",
+                "sha256:4f6886c59ba93ffde09b957d3e857e7950c8fe818bd5494d9b4287bc6d5bc7f1",
+                "sha256:5268a5a9177afff53dc6d70dffe63114ba2a6e7b20d9411cc3adeba09eeda403",
+                "sha256:544b995a6a1976fad5d7ff01409b4588f7608ccc41be72147700af91fd44875d",
+                "sha256:56a3b1853f3954ec1f0e91085f1350cc57d18f11205e4ab6e83e4b7c414120e0",
+                "sha256:571f762aed89025ba8cdcbe355fea56889715ec06d0264fd8b6a3f3fa38154ed",
+                "sha256:57bb92abdb48467b89c2d21da1ab01a07d0745e536d62afd2e30d5acbd0092eb",
+                "sha256:58cca552567423f04d06a075f4b473e78ab5bdb906febe56bf4797633f54aa4e",
+                "sha256:64ca3c7c614aefcdd5e358ecdd41d1237c35fe1417d01ec0160e7cdb0a380edc",
+                "sha256:678e50ec112bdc6df5a83ac259a55a4ba97a8b314c325ab26b3b5b071151bc61",
+                "sha256:696900ef6bc20bef6a242973943574f96c3f97d2183c1bd3da5eea4f559631b1",
+                "sha256:6dcbcb34f5c9b0cefdfc71ff745459241b7d3cda5b27c7ad69d45afc0821d1e1",
+                "sha256:6f02f30a4a6b3efe665ab13a3dd47109d80326c8fd286311d1ba9f397dc5f247",
+                "sha256:70b719a130b81dd130a57ac0ff636dc2c0127c5b35ca5467d1b67057e3c7a4d2",
+                "sha256:72d235d6365ca73d8ce92f7425065d70f5c1e19baa458eb3f0d570e425b73a96",
+                "sha256:7418fb5736d0d39b3ecc6bec4ff549777988feb260f5381636d8bd321b653038",
+                "sha256:77fed80e30fa65708546c4119840a46691290efc231f6bfb2ac2a39b52e15811",
+                "sha256:7ebccf0d760bc92a4a7c751aeb2fef6626144aace76ee8f5a63abeb100cae87f",
+                "sha256:7fb0ee35845bef1e8c4a152d766242164e138c239e3182f558ae15cb4a891f94",
+                "sha256:87aebf4acd7249bdff8d3df03aed4f09e67078e6762cfe0aecf8d0748ff94cde",
+                "sha256:88dc92d9eb5ea4968123e74db146d770b0c8d48f0e2bfb1dbc6c50a8edb12d64",
+                "sha256:8c62297bc7aea2147b472ca5ca2b4389377ad82898c87cabab2a94aedd75e337",
+                "sha256:8f617f60a8b609a13099b313e7e525e67f84ef4524b6acad396d9ff153f6e4cd",
+                "sha256:90a4da42aa322de8a3522461e3b5fe999935763b27f69a02fced40f4e3cf9682",
+                "sha256:95594b2ceeaa94934e3e94dd7bf5f3c3659cf1a26b1fb3edcf6e42dad7e0eaf2",
+                "sha256:9729190bd770314f5fbba42476abf6abe79a746eeda11d1d68fd56dd70e5c296",
+                "sha256:9d16fdfd7d70a6b0ca45d36eb19f7702fa77ef6256652f17594fc9ce534c9da6",
+                "sha256:9d7b6b90da7285642f480b48c9efd1d25302fd628237d8f6f6ee39ba6b2d2d34",
+                "sha256:a066ea6ad6218b4c233906adf0ae67830f451ed238419c0db609310dd781fbe7",
+                "sha256:a27fa11ebaccc099cac4309c799aa33919671a7660e29b3e465b7893bc64ec81",
+                "sha256:a4aca06ba295aa78bec9b33ec028d1ca08744c36294338c41432b7171060c808",
+                "sha256:af2ee67b3688b067e20fea3fe36b823a362609a1966e7e7a21883ae6da248804",
+                "sha256:af7ebce2a1e7caf30c0bb64a845f63a69e76a2fadbc1cac47178f7bb6e657bdd",
+                "sha256:b007e5dcba684e888fbc90554cb12a2f4e492927c8c2761a80b7590209821743",
+                "sha256:b25e72e115399a4441aad322258fa8267b873850dc7c276e3f874042728c2b45",
+                "sha256:b978c0678cffbe8860ec9edc91200e895c29ae1ac8a7085f947f8e8864c489fb",
+                "sha256:b99ea9d330e86ce1ff7f2456b33f1bf81c43862a5590faf4ef4ed3a63504bdab",
+                "sha256:b9fd0fda730461f510cfd9a40fafa5355d65f5e3dbdd8d6dfa342b5b3f5d1949",
+                "sha256:ba068f28028849da725ff9185c24f832ccf9207a40f9b28ac46ab7c04994bd41",
+                "sha256:be45a895f98877271e8a0b6cf40925e0369121ce423421c20fa6d7958dc753c2",
+                "sha256:bee5248d5ec9223545f8cc4f368c2d571477ae828c99409125c3911511d98245",
+                "sha256:c512824360ea7490390566ce00bee880e19b526b312b25cc0bc30a0fe95cb67f",
+                "sha256:c9180d1f5b4b73e28b64e63cc6c4c097690f102aa14935a62d5dd7426a4e5b5a",
+                "sha256:c96702e1082eab62ae583d64c4e19c9b848359196697e536a0c57ae9bd165bd5",
+                "sha256:c9d63d66059114a6756d09169c9209ffceabacb65b9cb0f66e6fc344b20b73e6",
+                "sha256:ce181dd1a7c6c012d0efa8ab603c34b5ee9d86e570c03415bbb1b8772eeb381c",
+                "sha256:d0356a21e58c3e99248930ff73cc05b1d302ff50f41a8a47371aefb04327378a",
+                "sha256:d0b96c30be9f9387b18b18b6133c75a7b1b0065da64e150fe1feb5ebf31ece1c",
+                "sha256:d2976b7079f09f48d59dc123293ed6282fca6ef96a270f4ea0364e4e54c8e855",
+                "sha256:d97b59cbd8a6c8b23524a8ce237ff9504d987dc07156258aa68ae06d2dd5f34d",
+                "sha256:da81512b83032ed6cdf85ca62e020b4c23dda87f1b6c26b932131222ccfdbd27",
+                "sha256:df2c55c958d3766bdb3e9d858b911288acec09a9aab15883f384fc7180df5bed",
+                "sha256:dfb2bb5e0f7198eaacfb6796fb0330afd28f36d985a770745fba554a5903595a",
+                "sha256:e4f22d67756518d71901edf73b38dc0eb4765cce22c8fe122cc81748d425262b",
+                "sha256:e648dca28178fc879c814cf285048dd22fd1f03e1104101106505ec0eea50a4d",
+                "sha256:e971d8680003d0af6020713e52f92109b46fedb463916e988814e04c8133578a",
+                "sha256:ee16906c8025fa464bea1e48128c048d02359fb40bebe5333103228528506530",
+                "sha256:f293a1419266e3bf3557d1f8778f9e1ffe7e6b2c8df5c9dca191caf60831eb74",
+                "sha256:f379f11e138dfd56c3f24a04164f871a08281194dd9ddf656a278d7d080c8ad0",
+                "sha256:f44e7ea288d022d4bf93b9e79dafcb4a7aea45a3cbeae2116792904931cefccf",
+                "sha256:f5b6133c8d313bde8bd0d123c169d22525300ff164c2189f849de495e1344577",
+                "sha256:f65741cc06630652e82aa68ddef4986a3ab9073dd46d59f94ce5f005fa72037c",
+                "sha256:f8c3b74f1cd577a5a9253eae7ed363f88cbb345a990ca3027e9038301d47c7f4",
+                "sha256:f96a63aecec22d3f7fdea3c6c98df9e42973f5856bb6812c3d8d78c262fee808",
+                "sha256:f98f6b7787bd2beb1f0dde03f23a0621a0c978edf673b7d8f5e7bc039cbe1b60",
+                "sha256:fde26267416c8478c95432c81489b53f57b0b5d24cd5c8bfaebf5bbaac4dc90c",
+                "sha256:fe632fa4501154d58dfbe1764a0495734d55f84eaf1feda4549a1f1ca76659e9",
+                "sha256:ff3f8757570e45da7a5bedaa140489846510014f7a9d5ee9301c61f3f1b8a686",
+                "sha256:ffe6b809a97ac6dea524b3b837d5b28743d8c2f121141056d168ff0ba8f614ef"
             ],
             "markers": "python_version >= '3.8'",
-            "version": "==27.0.0"
+            "version": "==27.0.1"
         },
         "simplejson": {
             "hashes": [
diff --git a/orchestration/flows/daily_predictions_flow.py b/orchestration/flows/daily_predictions_flow.py
index 2b3487a..2195d88 100644
--- a/orchestration/flows/daily_predictions_flow.py
+++ b/orchestration/flows/daily_predictions_flow.py
@@ -12,7 +12,7 @@ def daily_prediction_flow():
     """
     fecha = datetime.today().date()
     notify_telegram.submit(f"📈 Starting daily prediction for {fecha}")
-    
+
     try:
         s3_path = generate_daily_predictions()
         notify_telegram.submit(f"✅ Daily prediction uploaded to: {s3_path}")
diff --git a/orchestration/flows/main_flow.py b/orchestration/flows/main_flow.py
index 8cb26d4..47e1aaa 100644
--- a/orchestration/flows/main_flow.py
+++ b/orchestration/flows/main_flow.py
@@ -10,11 +10,7 @@ from orchestration.tasks.notify_telegram import notify_telegram
 
 
 @flow(name="main_train_milk_model")
-def main(
-    source: str = "local",
-    year: int = 0,
-    month: int = 0
-):
+def main(source: str = "local", year: int = 0, month: int = 0):
     """
     Main flow to load data and train a model monthly.
     If year/month are 0, it uses the previous month as reference.
@@ -40,14 +36,11 @@ def main(
         X_cur_dicts=X_val_dicts,
         y_cur=y_val,
         year=year,
-        month=month
+        month=month,
     )
 
     model_drift_dict = monitor_model_drift(
-        y_true=y_val,
-        y_pred=y_pred,
-        year=year,
-        month=month
+        y_true=y_val, y_pred=y_pred, year=year, month=month
     )
 
     # --- Evaluate Data Drift ---
@@ -61,7 +54,7 @@ def main(
 
     if data_drift_detected:
         notify_telegram.submit("🚨 <b>Data Drift detected</b>")
-    
+
     print("Data drift evaluated...")
 
     # --- Evaluate Model Drift ---
@@ -69,14 +62,16 @@ def main(
         rmse_str = model_drift_dict["widgets"][4]["params"]["counters"][0]["value"]
         reported_rmse = float(rmse_str)
     except Exception as e:
-        reported_rmse  = None
+        reported_rmse = None
         print("⚠️ No se pudo leer RMSE:", e)
 
     RMSE_THRESHOLD = 2.0
 
     if reported_rmse and reported_rmse > RMSE_THRESHOLD:
-        notify_telegram.submit(f"⚠️ <b>High RMSE</b>: {reported_rmse :.2f} (> {RMSE_THRESHOLD})")
-    
+        notify_telegram.submit(
+            f"⚠️ <b>High RMSE</b>: {reported_rmse :.2f} (> {RMSE_THRESHOLD})"
+        )
+
     print("model drift evaluated...")
 
     print(f"✅ Pipeline completed with RMSE: {rmse:.4f}")
@@ -87,6 +82,6 @@ def main(
 if __name__ == "__main__":
     main.serve(
         name="train-milk-model",
-        cron="0 6 2 * *",  
+        cron="0 6 2 * *",
         tags=["milk", "training"],
-    )
\ No newline at end of file
+    )
diff --git a/orchestration/flows/master_daily_flow.py b/orchestration/flows/master_daily_flow.py
index f759b53..ace62e5 100644
--- a/orchestration/flows/master_daily_flow.py
+++ b/orchestration/flows/master_daily_flow.py
@@ -88,13 +88,12 @@ def daily_pipeline(execution_date: Optional[str] = None):
             name=best_model_name,
             version=model_version,
             stage="Staging",
-            archive_existing_versions=True
+            archive_existing_versions=True,
         )
 
         # Get registered model version info (model_id path)
         registered_model = client.get_model_version(
-            name=best_model_name,
-            version=model_version
+            name=best_model_name, version=model_version
         )
 
         artifact_uri = registered_model.source  # ✅ this is the correct S3 model path
@@ -110,7 +109,7 @@ def daily_pipeline(execution_date: Optional[str] = None):
             "artifact_uri": artifact_uri,
             "rmse": rmse,
             "promoted_stage": "Staging",
-            "promotion_time": datetime.utcnow().isoformat()
+            "promotion_time": datetime.utcnow().isoformat(),
         }
 
         s3 = boto3.client("s3")
@@ -118,7 +117,7 @@ def daily_pipeline(execution_date: Optional[str] = None):
             Bucket="mlflow-models-milk-price-dev",
             Key="promoted/daily_model.json",
             Body=json.dumps(promotion_record),
-            ContentType="application/json"
+            ContentType="application/json",
         )
 
         print("📤 Promotion metadata saved to S3.")
@@ -126,7 +125,9 @@ def daily_pipeline(execution_date: Optional[str] = None):
             f"📌 Promoted '{best_model_name}' v{model_version} to <b>Staging</b> and saved metadata to S3."
         )
     else:
-        notify_telegram.submit(f"⚠️ No version found to promote for model '{best_model_name}'")
+        notify_telegram.submit(
+            f"⚠️ No version found to promote for model '{best_model_name}'"
+        )
 
 
 if __name__ == "__main__":
diff --git a/orchestration/flows/model_selection_flow.py b/orchestration/flows/model_selection_flow.py
index 2cd073c..4fb6f59 100644
--- a/orchestration/flows/model_selection_flow.py
+++ b/orchestration/flows/model_selection_flow.py
@@ -6,6 +6,7 @@ from training.train_random_forest_model import train_random_forest_model
 from training.train_xgboost_model import train_xgboost_model
 import mlflow
 
+
 @flow(name="train_and_select_model")
 def train_and_select_model_flow():
     notify_telegram.send("🚀 Starting model training and selection pipeline...")
@@ -32,13 +33,16 @@ def train_and_select_model_flow():
             name=best_model_name,
             version=model_version,
             stage="Staging",
-            archive_existing_versions=True
+            archive_existing_versions=True,
         )
         notify_telegram.send(
             f"📌 Promoted model '{best_model_name}' version {model_version} to 'Staging' in MLflow."
         )
     else:
-        notify_telegram.send(f"⚠️ No version found to promote for model '{best_model_name}'")
+        notify_telegram.send(
+            f"⚠️ No version found to promote for model '{best_model_name}'"
+        )
+
 
 if __name__ == "__main__":
     train_and_select_model_flow()
diff --git a/orchestration/flows/test_full_data_creation.py b/orchestration/flows/test_full_data_creation.py
index a0fba44..2f259b3 100644
--- a/orchestration/flows/test_full_data_creation.py
+++ b/orchestration/flows/test_full_data_creation.py
@@ -1,10 +1,12 @@
 from prefect import flow
 from orchestration.tasks.prepare_full_dataset_s3 import prepare_full_dataset_s3
 
+
 @flow(name="prepare-dataset-flow")
 def run():
     output = prepare_full_dataset_s3(reference_date="2025-07-30")
     print(output)
 
+
 if __name__ == "__main__":
-    run()
\ No newline at end of file
+    run()
diff --git a/orchestration/flows/test_ingest_flow.py b/orchestration/flows/test_ingest_flow.py
index f41b4f0..a0b74b7 100644
--- a/orchestration/flows/test_ingest_flow.py
+++ b/orchestration/flows/test_ingest_flow.py
@@ -4,10 +4,11 @@ from orchestration.tasks.extract_and_ingest_today import extract_and_ingest_toda
 from orchestration.tasks.monitor_data_drift_from_s3 import monitor_data_drift_from_s3
 from orchestration.tasks.notify_telegram import notify_telegram
 
+
 @flow(name="check-and-download-daily-leche")
 def main():
     should_run = check_file_availability()
-    
+
     if should_run:
         s3_path = extract_and_ingest_today()
         print(f"✅ File ingested and uploaded to: {s3_path}")
@@ -26,8 +27,10 @@ def main():
         if data_drift_detected:
             notify_telegram.submit("🚨 <b>Data Drift detected</b>")
         else:
-            notify_telegram.submit("✅ <b>Data drift evaluated, and no issues found</b>")
-        
+            notify_telegram.submit(
+                "✅ <b>Data drift evaluated, and no issues found</b>"
+            )
+
         print("Data drift evaluated...")
 
     else:
diff --git a/orchestration/flows/test_train_pipeline.py b/orchestration/flows/test_train_pipeline.py
index b70bad9..1d84d52 100644
--- a/orchestration/flows/test_train_pipeline.py
+++ b/orchestration/flows/test_train_pipeline.py
@@ -2,10 +2,12 @@ from orchestration.tasks.load_data import load_data
 from orchestration.tasks.train_model import train_model
 from prefect import flow
 
+
 @flow
 def train_pipeline(year: int, month: int, source: str = "local"):
     X_train_dicts, y_train, X_val_dicts, y_val = load_data(year, month, source)
     train_model(X_train_dicts, y_train, X_val_dicts, y_val)
 
+
 if __name__ == "__main__":
     train_pipeline(year=2025, month=7)
diff --git a/orchestration/tasks/check_file_availability.py b/orchestration/tasks/check_file_availability.py
index e5ddc7c..021708a 100644
--- a/orchestration/tasks/check_file_availability.py
+++ b/orchestration/tasks/check_file_availability.py
@@ -9,6 +9,7 @@ BUCKET_NAME = "mlops-milk-datalake"
 S3_PREFIX = "daily"
 BASE_URL = "https://www.economia-sniim.gob.mx/SNIIM-Archivosfuente/Comentarios/Otros"
 
+
 @task
 def check_file_availability(execution_date: datetime = None) -> bool:
     """
@@ -41,4 +42,3 @@ def check_file_availability(execution_date: datetime = None) -> bool:
     file_online = remote_file_exists(f"{BASE_URL}/{excel_filename}")
 
     return not file_in_s3 and file_online
-
diff --git a/orchestration/tasks/extract_and_ingest_today.py b/orchestration/tasks/extract_and_ingest_today.py
index 5ff56f4..5fdd3f4 100644
--- a/orchestration/tasks/extract_and_ingest_today.py
+++ b/orchestration/tasks/extract_and_ingest_today.py
@@ -12,15 +12,26 @@ BASE_URL = "https://www.economia-sniim.gob.mx/SNIIM-Archivosfuente/Comentarios/O
 
 # Diccionario de meses en español
 meses_es_a_en = {
-    'enero': 'January', 'febrero': 'February', 'marzo': 'March',
-    'abril': 'April', 'mayo': 'May', 'junio': 'June',
-    'julio': 'July', 'agosto': 'August', 'septiembre': 'September',
-    'octubre': 'October', 'noviembre': 'November', 'diciembre': 'December'
+    "enero": "January",
+    "febrero": "February",
+    "marzo": "March",
+    "abril": "April",
+    "mayo": "May",
+    "junio": "June",
+    "julio": "July",
+    "agosto": "August",
+    "septiembre": "September",
+    "octubre": "October",
+    "noviembre": "November",
+    "diciembre": "December",
 }
 
+
 @task(name="extract_and_ingest_today", retries=2, retry_delay_seconds=30)
 def extract_and_ingest_today(execution_date: datetime = None) -> str:
-    execution_date = execution_date.date() if execution_date else datetime.today().date()
+    execution_date = (
+        execution_date.date() if execution_date else datetime.today().date()
+    )
 
     # Rutas dinámicas
     excel_filename = f"Leche{execution_date.strftime('%d%m%Y')}.xlsx"
@@ -62,13 +73,28 @@ def parse_excel_to_df(path):
     data_final = []
 
     for i, row in df.iterrows():
-        if row.astype(str).str.contains("Precio promedio al consumidor por litro", case=False, na=False).any():
+        if (
+            row.astype(str)
+            .str.contains(
+                "Precio promedio al consumidor por litro", case=False, na=False
+            )
+            .any()
+        ):
             row_fecha = df.iloc[i + 1]
-            fecha_raw = next((str(cell) for cell in row_fecha if isinstance(cell, str) and "de" in cell), None)
+            fecha_raw = next(
+                (
+                    str(cell)
+                    for cell in row_fecha
+                    if isinstance(cell, str) and "de" in cell
+                ),
+                None,
+            )
             if not fecha_raw:
                 continue
 
-            match = re.search(r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE)
+            match = re.search(
+                r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE
+            )
             if not match:
                 continue
             dia, mes, año = match.groups()
@@ -84,22 +110,31 @@ def parse_excel_to_df(path):
                 canal = enc2[j]
                 columnas.append(f"{tipo}_{canal}")
 
-            df_bloque = df.iloc[i + 4:, 0:6].copy()
+            df_bloque = df.iloc[i + 4 :, 0:6].copy()
             df_bloque.columns = columnas
-            df_bloque[['Estado', 'Ciudad']] = df_bloque[['Estado', 'Ciudad']].ffill()
+            df_bloque[["Estado", "Ciudad"]] = df_bloque[["Estado", "Ciudad"]].ffill()
 
             stop_idx = None
             for k, row_k in df_bloque.iterrows():
                 celda = str(row_k[0]).strip().lower()
-                if "promedio" in celda or "fuente" in celda or "sniim" in celda or celda == "estado" or celda == "nan":
+                if (
+                    "promedio" in celda
+                    or "fuente" in celda
+                    or "sniim" in celda
+                    or celda == "estado"
+                    or celda == "nan"
+                ):
                     stop_idx = k
                     break
             if stop_idx:
-                df_bloque = df_bloque.loc[:stop_idx - 1]
+                df_bloque = df_bloque.loc[: stop_idx - 1]
 
             df_bloque["Fecha"] = fecha
-            df_long = df_bloque.melt(id_vars=["Fecha", "Estado", "Ciudad"],
-                                     var_name="Tipo_Canal", value_name="Precio")
+            df_long = df_bloque.melt(
+                id_vars=["Fecha", "Estado", "Ciudad"],
+                var_name="Tipo_Canal",
+                value_name="Precio",
+            )
 
             df_long["Tipo"] = df_long["Tipo_Canal"].str.split("_").str[0]
             df_long["Canal"] = df_long["Tipo_Canal"].str.split("_").str[1]
@@ -109,5 +144,7 @@ def parse_excel_to_df(path):
             data_final.append(df_long)
 
     df_final = pd.concat(data_final, ignore_index=True)
-    df_final = df_final[~df_final["Ciudad"].str.lower().str.contains("promedio", na=False)]
+    df_final = df_final[
+        ~df_final["Ciudad"].str.lower().str.contains("promedio", na=False)
+    ]
     return df_final
diff --git a/orchestration/tasks/generate_daily_predictions.py b/orchestration/tasks/generate_daily_predictions.py
index ea43439..d67ced3 100644
--- a/orchestration/tasks/generate_daily_predictions.py
+++ b/orchestration/tasks/generate_daily_predictions.py
@@ -6,6 +6,7 @@ from prefect import task
 import boto3
 from pathlib import Path
 
+
 @task(name="generate_daily_predictions")
 def generate_daily_predictions() -> str:
     # --- Leer el dataset completo con histórico ---
@@ -26,10 +27,10 @@ def generate_daily_predictions() -> str:
     records = []
     for _, row in combinations.iterrows():
         mask = (
-            (df["Estado"] == row["Estado"]) &
-            (df["Ciudad"] == row["Ciudad"]) &
-            (df["Tipo"] == row["Tipo"]) &
-            (df["Canal"] == row["Canal"])
+            (df["Estado"] == row["Estado"])
+            & (df["Ciudad"] == row["Ciudad"])
+            & (df["Tipo"] == row["Tipo"])
+            & (df["Canal"] == row["Canal"])
         )
         df_sub = df[mask].sort_values("Fecha")
         df_sub = df_sub[df_sub["Fecha"] < pd.Timestamp(fecha_pred)]
@@ -50,7 +51,7 @@ def generate_daily_predictions() -> str:
             "año": tomorrow.year,
             "dia_semana": str(tomorrow.weekday()),
             "Precio_lag1": precio_lag1,
-            "Precio_mean7": precio_mean7
+            "Precio_mean7": precio_mean7,
         }
         records.append(record)
 
@@ -59,8 +60,7 @@ def generate_daily_predictions() -> str:
     # --- Leer metadata del modelo directamente desde S3 ---
     s3 = boto3.client("s3")
     response = s3.get_object(
-        Bucket="mlflow-models-milk-price-dev",
-        Key="promoted/daily_model.json"
+        Bucket="mlflow-models-milk-price-dev", Key="promoted/daily_model.json"
     )
     meta = json.load(response["Body"])
 
@@ -81,9 +81,7 @@ def generate_daily_predictions() -> str:
     # --- Subir reporte a S3 ---
     s3_output_key = f"predicciones/{fecha_pred}/predicciones_{fecha_pred}.csv"
     s3.upload_file(
-        Filename=output_local_path,
-        Bucket="mlops-milk-datalake",
-        Key=s3_output_key
+        Filename=output_local_path, Bucket="mlops-milk-datalake", Key=s3_output_key
     )
     print(f"📤 Archivo subido a S3: s3://mlops-milk-datalake/{s3_output_key}")
 
diff --git a/orchestration/tasks/load_data.py b/orchestration/tasks/load_data.py
index e494bab..ba11bca 100644
--- a/orchestration/tasks/load_data.py
+++ b/orchestration/tasks/load_data.py
@@ -6,7 +6,9 @@ from datetime import datetime
 from dateutil.relativedelta import relativedelta
 
 
-def read_parquet_partition(year: int, month: int, source: str = "local") -> pd.DataFrame:
+def read_parquet_partition(
+    year: int, month: int, source: str = "local"
+) -> pd.DataFrame:
     """
     Reads a single monthly .parquet file from local or S3.
 
diff --git a/orchestration/tasks/monitor_data_drift_from_s3.py b/orchestration/tasks/monitor_data_drift_from_s3.py
index a3e56e2..ce4f20d 100644
--- a/orchestration/tasks/monitor_data_drift_from_s3.py
+++ b/orchestration/tasks/monitor_data_drift_from_s3.py
@@ -45,7 +45,9 @@ def monitor_data_drift_from_s3(
     dated_files.sort(key=lambda x: x[1], reverse=True)
 
     current_files = [f for f, d in dated_files if d >= current_cutoff]
-    reference_files = [f for f, d in dated_files if reference_cutoff <= d < current_cutoff]
+    reference_files = [
+        f for f, d in dated_files if reference_cutoff <= d < current_cutoff
+    ]
 
     if not current_files or not reference_files:
         raise ValueError("❌ Not enough files to compute drift report.")
@@ -54,14 +56,18 @@ def monitor_data_drift_from_s3(
     print(f"📁 Reference files: {len(reference_files)}")
 
     # --- Load data ---
-    df_cur = pd.concat([
-        pd.read_parquet(f"s3://{f}", storage_options={"anon": False})
-        for f in current_files
-    ])
-    df_ref = pd.concat([
-        pd.read_parquet(f"s3://{f}", storage_options={"anon": False})
-        for f in reference_files
-    ])
+    df_cur = pd.concat(
+        [
+            pd.read_parquet(f"s3://{f}", storage_options={"anon": False})
+            for f in current_files
+        ]
+    )
+    df_ref = pd.concat(
+        [
+            pd.read_parquet(f"s3://{f}", storage_options={"anon": False})
+            for f in reference_files
+        ]
+    )
 
     df_cur["Fecha"] = pd.to_datetime(df_cur["Fecha"])
     df_ref["Fecha"] = pd.to_datetime(df_ref["Fecha"])
@@ -74,7 +80,10 @@ def monitor_data_drift_from_s3(
     output_dir = Path("monitor/reports")
     output_dir.mkdir(parents=True, exist_ok=True)
 
-    output_path = output_dir / f"{base_date.strftime('%Y-%m-%d')}-data-drift-report.evidently.html"
+    output_path = (
+        output_dir
+        / f"{base_date.strftime('%Y-%m-%d')}-data-drift-report.evidently.html"
+    )
     output.save_html(str(output_path))
 
     print(f"📊 Drift report saved: {output_path}")
diff --git a/orchestration/tasks/monitor_model_drift.py b/orchestration/tasks/monitor_model_drift.py
index 074267d..8fdf067 100644
--- a/orchestration/tasks/monitor_model_drift.py
+++ b/orchestration/tasks/monitor_model_drift.py
@@ -4,6 +4,7 @@ from prefect import task
 from evidently import Report, Dataset, Regression, DataDefinition
 from evidently.metrics import MeanError, RMSE, DummyMAE, DummyRMSE
 
+
 @task(name="monitor_model_drift")
 def monitor_model_drift(
     y_true: list,
@@ -11,21 +12,15 @@ def monitor_model_drift(
     year: int,
     month: int,
 ) -> str:
-    curr_df = pd.DataFrame({
-        "prediction": y_pred,
-        "target": y_true
-    })
+    curr_df = pd.DataFrame({"prediction": y_pred, "target": y_true})
 
     data_definition = DataDefinition(
         regression=[Regression(target="target", prediction="prediction")]
-        )
-
-    curr_dataset = Dataset.from_pandas(
-        curr_df,
-        data_definition=data_definition
     )
 
-    report = Report([MeanError(),RMSE(),DummyMAE(),DummyRMSE()])
+    curr_dataset = Dataset.from_pandas(curr_df, data_definition=data_definition)
+
+    report = Report([MeanError(), RMSE(), DummyMAE(), DummyRMSE()])
 
     output = report.run(current_data=curr_dataset)
 
@@ -37,4 +32,4 @@ def monitor_model_drift(
 
     print(f"📉 Model drift report saved to: {output_path}")
 
-    return output.dump_dict()
\ No newline at end of file
+    return output.dump_dict()
diff --git a/orchestration/tasks/notify_telegram.py b/orchestration/tasks/notify_telegram.py
index 752e23a..10590f8 100644
--- a/orchestration/tasks/notify_telegram.py
+++ b/orchestration/tasks/notify_telegram.py
@@ -8,11 +8,12 @@ load_dotenv()
 BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
 CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
 
+
 @task(name="notify_telegram")
 def notify_telegram(message: str, parse_mode: str = "HTML") -> None:
     """
     Envía un mensaje a Telegram usando el bot y chat definidos por variables de entorno.
-    
+
     Requiere:
     - TELEGRAM_BOT_TOKEN: token del bot de Telegram
     - TELEGRAM_CHAT_ID: ID del chat o canal
@@ -23,14 +24,12 @@ def notify_telegram(message: str, parse_mode: str = "HTML") -> None:
     """
 
     if not BOT_TOKEN or not CHAT_ID:
-        raise ValueError("Variables de entorno TELEGRAM_BOT_TOKEN y TELEGRAM_CHAT_ID son requeridas")
+        raise ValueError(
+            "Variables de entorno TELEGRAM_BOT_TOKEN y TELEGRAM_CHAT_ID son requeridas"
+        )
 
     url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
-    payload = {
-        "chat_id": CHAT_ID,
-        "text": message,
-        "parse_mode": parse_mode
-    }
+    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": parse_mode}
 
     response = requests.post(url, json=payload)
 
diff --git a/orchestration/tasks/prepare_full_dataset_s3.py b/orchestration/tasks/prepare_full_dataset_s3.py
index 10fee80..332afee 100644
--- a/orchestration/tasks/prepare_full_dataset_s3.py
+++ b/orchestration/tasks/prepare_full_dataset_s3.py
@@ -4,12 +4,13 @@ import pandas as pd
 from pathlib import Path
 import fsspec
 
+
 @task(name="prepare_full_dataset_s3")
 def prepare_full_dataset_s3(
     reference_date: str = None,  # pass as string in ISO format
     lookback_days: int = 548,
     s3_root: str = "s3://mlops-milk-datalake/daily",
-    output_path: str = "data/processed/full_dataset.parquet"
+    output_path: str = "data/processed/full_dataset.parquet",
 ) -> str:
     if reference_date is None:
         reference_date = datetime.today()
@@ -27,7 +28,9 @@ def prepare_full_dataset_s3(
     for path in all_paths:
         filename = path.split("/")[-1]
         try:
-            file_date = datetime.strptime(filename.split("-data.parquet")[0], "%Y-%m-%d")
+            file_date = datetime.strptime(
+                filename.split("-data.parquet")[0], "%Y-%m-%d"
+            )
             if start_date <= file_date <= reference_date:
                 valid_files.append(f"s3://{path}")
         except:
diff --git a/orchestration/tasks/train_model.py b/orchestration/tasks/train_model.py
index fbbd225..1e2bb0a 100644
--- a/orchestration/tasks/train_model.py
+++ b/orchestration/tasks/train_model.py
@@ -10,8 +10,16 @@ import mlflow
 import mlflow.sklearn
 from datetime import datetime
 
+
 @task
-def train_model(X_train_dicts, y_train, X_val_dicts, y_val, model_name="milk-price-predictor", max_evals=25):
+def train_model(
+    X_train_dicts,
+    y_train,
+    X_val_dicts,
+    y_val,
+    model_name="milk-price-predictor",
+    max_evals=25,
+):
     """
     Performs hyperparameter tuning using Hyperopt, trains final model, logs to MLflow, and registers the model.
     """
@@ -44,18 +52,19 @@ def train_model(X_train_dicts, y_train, X_val_dicts, y_val, model_name="milk-pri
                 subsample=params["subsample"],
                 colsample_bytree=params["colsample_bytree"],
                 random_state=42,
-                n_jobs=-1
+                n_jobs=-1,
             )
 
-            pipeline = Pipeline([
-                ("vectorizer", DictVectorizer()),
-                ("regressor", model)
-            ])
+            pipeline = Pipeline(
+                [("vectorizer", DictVectorizer()), ("regressor", model)]
+            )
 
             score = cross_val_score(
-                pipeline, X_train_dicts, y_train,
+                pipeline,
+                X_train_dicts,
+                y_train,
                 scoring="neg_root_mean_squared_error",
-                cv=3
+                cv=3,
             )
             rmse = -score.mean()
             mlflow.log_metric("rmse", rmse)
@@ -82,13 +91,12 @@ def train_model(X_train_dicts, y_train, X_val_dicts, y_val, model_name="milk-pri
             subsample=best["subsample"],
             colsample_bytree=best["colsample_bytree"],
             random_state=42,
-            n_jobs=-1
+            n_jobs=-1,
         )
 
-        pipeline = Pipeline([
-            ("vectorizer", DictVectorizer()),
-            ("regressor", best_model)
-        ])
+        pipeline = Pipeline(
+            [("vectorizer", DictVectorizer()), ("regressor", best_model)]
+        )
 
         pipeline.fit(X_train_dicts, y_train)
         y_pred = pipeline.predict(X_val_dicts)
diff --git a/orchestration/tasks/train_random_forest_model.py b/orchestration/tasks/train_random_forest_model.py
index 100d25e..e792a02 100644
--- a/orchestration/tasks/train_random_forest_model.py
+++ b/orchestration/tasks/train_random_forest_model.py
@@ -16,8 +16,11 @@ import mlflow.sklearn
 from datetime import datetime
 from prefect import task
 
+
 @task(name="train_random_forest_model")
-def train_random_forest_model(path_to_dataset: str = "data/processed/full_dataset.parquet", max_evals: int = 25):
+def train_random_forest_model(
+    path_to_dataset: str = "data/processed/full_dataset.parquet", max_evals: int = 25
+):
     df = pd.read_parquet(path_to_dataset)
     df = df.dropna(subset=["Precio", "Precio_lag1", "Precio_mean7"])
 
@@ -33,19 +36,26 @@ def train_random_forest_model(path_to_dataset: str = "data/processed/full_datase
             mlflow.log_params(params)
             mlflow.set_tags({"model_type": "random_forest"})
 
-            pipeline = Pipeline([
-                ("vectorizer", DictVectorizer()),
-                ("regressor", RandomForestRegressor(
-                    n_estimators=int(params["n_estimators"]),
-                    max_depth=int(params["max_depth"]),
-                    min_samples_split=int(params["min_samples_split"]),
-                    min_samples_leaf=int(params["min_samples_leaf"]),
-                    random_state=42,
-                    n_jobs=-1
-                ))
-            ])
-
-            score = cross_val_score(pipeline, feature_dicts, y, scoring="neg_root_mean_squared_error", cv=3)
+            pipeline = Pipeline(
+                [
+                    ("vectorizer", DictVectorizer()),
+                    (
+                        "regressor",
+                        RandomForestRegressor(
+                            n_estimators=int(params["n_estimators"]),
+                            max_depth=int(params["max_depth"]),
+                            min_samples_split=int(params["min_samples_split"]),
+                            min_samples_leaf=int(params["min_samples_leaf"]),
+                            random_state=42,
+                            n_jobs=-1,
+                        ),
+                    ),
+                ]
+            )
+
+            score = cross_val_score(
+                pipeline, feature_dicts, y, scoring="neg_root_mean_squared_error", cv=3
+            )
             rmse = -score.mean()
             mlflow.log_metric("rmse", rmse)
             return {"loss": rmse, "status": STATUS_OK}
@@ -54,7 +64,7 @@ def train_random_forest_model(path_to_dataset: str = "data/processed/full_datase
         "n_estimators": hp.quniform("n_estimators", 50, 300, 10),
         "max_depth": hp.quniform("max_depth", 5, 20, 1),
         "min_samples_split": hp.quniform("min_samples_split", 2, 10, 1),
-        "min_samples_leaf": hp.quniform("min_samples_leaf", 1, 5, 1)
+        "min_samples_leaf": hp.quniform("min_samples_leaf", 1, 5, 1),
     }
 
     mlflow.set_tracking_uri("http://127.0.0.1:5000")
@@ -66,7 +76,13 @@ def train_random_forest_model(path_to_dataset: str = "data/processed/full_datase
 
     with mlflow.start_run(run_name=run_name) as run:
         trials_rf = Trials()
-        best_rf = fmin(fn=objective_rf, space=search_space_rf, algo=tpe.suggest, max_evals=max_evals, trials=trials_rf)
+        best_rf = fmin(
+            fn=objective_rf,
+            space=search_space_rf,
+            algo=tpe.suggest,
+            max_evals=max_evals,
+            trials=trials_rf,
+        )
 
         dv = DictVectorizer()
         X = dv.fit_transform(feature_dicts)
@@ -77,13 +93,10 @@ def train_random_forest_model(path_to_dataset: str = "data/processed/full_datase
             min_samples_split=int(best_rf["min_samples_split"]),
             min_samples_leaf=int(best_rf["min_samples_leaf"]),
             random_state=42,
-            n_jobs=-1
+            n_jobs=-1,
         )
 
-        pipeline = Pipeline([
-            ("vectorizer", dv),
-            ("regressor", final_rf)
-        ])
+        pipeline = Pipeline([("vectorizer", dv), ("regressor", final_rf)])
         pipeline.fit(feature_dicts, y)
         y_pred = pipeline.predict(feature_dicts)
         rmse = root_mean_squared_error(y, y_pred)
diff --git a/orchestration/tasks/train_xgboost_model.py b/orchestration/tasks/train_xgboost_model.py
index cf2a19a..240b0f4 100644
--- a/orchestration/tasks/train_xgboost_model.py
+++ b/orchestration/tasks/train_xgboost_model.py
@@ -16,8 +16,11 @@ import mlflow.sklearn
 from datetime import datetime
 from prefect import task
 
+
 @task(name="train_xgboost_model")
-def train_xgboost_model(path_to_dataset: str = "data/processed/full_dataset.parquet", max_evals: int = 25):
+def train_xgboost_model(
+    path_to_dataset: str = "data/processed/full_dataset.parquet", max_evals: int = 25
+):
     df = pd.read_parquet(path_to_dataset)
     df = df.dropna(subset=["Precio", "Precio_lag1", "Precio_mean7"])
 
@@ -33,22 +36,29 @@ def train_xgboost_model(path_to_dataset: str = "data/processed/full_dataset.parq
             mlflow.log_params(params)
             mlflow.set_tags({"model_type": "xgboost"})
 
-            pipeline = Pipeline([
-                ("vectorizer", DictVectorizer()),
-                ("regressor", XGBRegressor(
-                    max_depth=int(params["max_depth"]),
-                    learning_rate=params["learning_rate"],
-                    n_estimators=int(params["n_estimators"]),
-                    min_child_weight=params["min_child_weight"],
-                    gamma=params["gamma"],
-                    subsample=params["subsample"],
-                    colsample_bytree=params["colsample_bytree"] ,
-                    random_state=42,
-                    n_jobs=-1
-                ))
-            ])
-
-            score = cross_val_score(pipeline, feature_dicts, y, scoring="neg_root_mean_squared_error", cv=3)
+            pipeline = Pipeline(
+                [
+                    ("vectorizer", DictVectorizer()),
+                    (
+                        "regressor",
+                        XGBRegressor(
+                            max_depth=int(params["max_depth"]),
+                            learning_rate=params["learning_rate"],
+                            n_estimators=int(params["n_estimators"]),
+                            min_child_weight=params["min_child_weight"],
+                            gamma=params["gamma"],
+                            subsample=params["subsample"],
+                            colsample_bytree=params["colsample_bytree"],
+                            random_state=42,
+                            n_jobs=-1,
+                        ),
+                    ),
+                ]
+            )
+
+            score = cross_val_score(
+                pipeline, feature_dicts, y, scoring="neg_root_mean_squared_error", cv=3
+            )
             rmse = -score.mean()
             mlflow.log_metric("rmse", rmse)
             return {"loss": rmse, "status": STATUS_OK}
@@ -72,7 +82,13 @@ def train_xgboost_model(path_to_dataset: str = "data/processed/full_dataset.parq
 
     with mlflow.start_run(run_name=run_name) as run:
         trials_xgb = Trials()
-        best_xgb = fmin(fn=objective_xgb, space=search_space_xgb, algo=tpe.suggest, max_evals=max_evals, trials=trials_xgb)
+        best_xgb = fmin(
+            fn=objective_xgb,
+            space=search_space_xgb,
+            algo=tpe.suggest,
+            max_evals=max_evals,
+            trials=trials_xgb,
+        )
 
         dv = DictVectorizer()
         X = dv.fit_transform(feature_dicts)
@@ -86,13 +102,10 @@ def train_xgboost_model(path_to_dataset: str = "data/processed/full_dataset.parq
             subsample=best_xgb["subsample"],
             colsample_bytree=best_xgb["colsample_bytree"],
             random_state=42,
-            n_jobs=-1
+            n_jobs=-1,
         )
 
-        pipeline = Pipeline([
-            ("vectorizer", dv),
-            ("regressor", final_xgb)
-        ])
+        pipeline = Pipeline([("vectorizer", dv), ("regressor", final_xgb)])
         pipeline.fit(feature_dicts, y)
         y_pred = pipeline.predict(feature_dicts)
         rmse = root_mean_squared_error(y, y_pred)
@@ -109,4 +122,4 @@ def train_xgboost_model(path_to_dataset: str = "data/processed/full_dataset.parq
         print(f"📌 Model logged to MLflow with run ID: {run_id}")
         print(f"📌 Model registered in MLflow Model Registry as '{model_name}'")
 
-        return rmse
\ No newline at end of file
+        return rmse
