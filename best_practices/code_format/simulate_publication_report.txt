would reformat /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_publication.py
would reformat /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_daily_publication.py

Oh no! üí• üíî üí•
2 files would be reformatted.
--- /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_publication.py	2025-07-26 06:37:03.791161+00:00
+++ /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_publication.py	2025-08-03 18:46:22.549712+00:00
@@ -14,35 +14,60 @@
 UPLOAD_TO_S3 = True
 S3_BUCKET = "mlops-milk-datalake"
 
 # Traducci√≥n de meses
 meses_es_a_en = {
-    'enero': 'January', 'febrero': 'February', 'marzo': 'March',
-    'abril': 'April', 'mayo': 'May', 'junio': 'June',
-    'julio': 'July', 'agosto': 'August', 'septiembre': 'September',
-    'octubre': 'October', 'noviembre': 'November', 'diciembre': 'December'
+    "enero": "January",
+    "febrero": "February",
+    "marzo": "March",
+    "abril": "April",
+    "mayo": "May",
+    "junio": "June",
+    "julio": "July",
+    "agosto": "August",
+    "septiembre": "September",
+    "octubre": "October",
+    "noviembre": "November",
+    "diciembre": "December",
 }
+
 
 def download_excel(url=EXCEL_URL, output_path=EXCEL_FILE):
     output_dir = Path(output_path).parent
     output_dir.mkdir(parents=True, exist_ok=True)
 
     print(f"‚¨áÔ∏è  Descargando archivo desde {url}")
     os.system(f"wget {url} -O {output_path}")
 
+
 def parse_excel_to_df(path=EXCEL_FILE):
     df = pd.read_excel(path, header=None)
     data_final = []
 
     for i, row in df.iterrows():
-        if row.astype(str).str.contains("Precio promedio al consumidor por litro", case=False, na=False).any():
+        if (
+            row.astype(str)
+            .str.contains(
+                "Precio promedio al consumidor por litro", case=False, na=False
+            )
+            .any()
+        ):
             row_fecha = df.iloc[i + 1]
-            fecha_raw = next((str(cell) for cell in row_fecha if isinstance(cell, str) and "de" in cell), None)
+            fecha_raw = next(
+                (
+                    str(cell)
+                    for cell in row_fecha
+                    if isinstance(cell, str) and "de" in cell
+                ),
+                None,
+            )
             if not fecha_raw:
                 continue
 
-            match = re.search(r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE)
+            match = re.search(
+                r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE
+            )
             if not match:
                 continue
             dia, mes, a√±o = match.groups()
             mes_en = meses_es_a_en.get(mes.lower())
             if not mes_en:
@@ -54,37 +79,47 @@
             for j in range(4):
                 tipo = "Pasteurizada" if j < 2 else "Ultrapasteurizada"
                 canal = enc2[j]
                 columnas.append(f"{tipo}_{canal}")
 
-            df_bloque = df.iloc[i + 4:, 0:6].copy()
+            df_bloque = df.iloc[i + 4 :, 0:6].copy()
             df_bloque.columns = columnas
-            df_bloque[['Estado', 'Ciudad']] = df_bloque[['Estado', 'Ciudad']].ffill()
+            df_bloque[["Estado", "Ciudad"]] = df_bloque[["Estado", "Ciudad"]].ffill()
 
             stop_idx = None
             for k, row_k in df_bloque.iterrows():
                 celda = str(row_k[0]).strip().lower()
-                if "promedio" in celda or "fuente" in celda or "sniim" in celda or celda == "estado" or celda == "nan":
+                if (
+                    "promedio" in celda
+                    or "fuente" in celda
+                    or "sniim" in celda
+                    or celda == "estado"
+                    or celda == "nan"
+                ):
                     stop_idx = k
                     break
 
             if stop_idx:
-                df_bloque = df_bloque.loc[:stop_idx - 1]
+                df_bloque = df_bloque.loc[: stop_idx - 1]
 
             df_bloque["Fecha"] = fecha
-            df_long = df_bloque.melt(id_vars=["Fecha", "Estado", "Ciudad"],
-                                     var_name="Tipo_Canal", value_name="Precio")
+            df_long = df_bloque.melt(
+                id_vars=["Fecha", "Estado", "Ciudad"],
+                var_name="Tipo_Canal",
+                value_name="Precio",
+            )
 
             df_long["Tipo"] = df_long["Tipo_Canal"].str.split("_").str[0]
             df_long["Canal"] = df_long["Tipo_Canal"].str.split("_").str[1]
             df_long = df_long[["Fecha", "Estado", "Ciudad", "Tipo", "Canal", "Precio"]]
             df_long["Precio"] = pd.to_numeric(df_long["Precio"], errors="coerce")
 
             data_final.append(df_long)
 
     df_final = pd.concat(data_final, ignore_index=True)
     return df_final
+
 
 def save_partitions(df: pd.DataFrame, output_root="../data/datalake/monthly"):
     df["Fecha"] = pd.to_datetime(df["Fecha"])
     df["A√±o"] = df["Fecha"].dt.year
     df["Mes"] = df["Fecha"].dt.month
@@ -94,20 +129,25 @@
         Path(path).parent.mkdir(parents=True, exist_ok=True)
         df_group.drop(columns=["A√±o", "Mes"]).to_parquet(path, index=False)
         print(f"‚úÖ Guardado: {path}")
 
         if UPLOAD_TO_S3:
-            upload_to_s3(path, S3_BUCKET, f"monthly/{a√±o}/{mes:02d}/{a√±o}-{mes:02d}-data.parquet")
+            upload_to_s3(
+                path, S3_BUCKET, f"monthly/{a√±o}/{mes:02d}/{a√±o}-{mes:02d}-data.parquet"
+            )
+
 
 def upload_to_s3(local_path, bucket, s3_key):
     s3 = boto3.client("s3")
     with open(local_path, "rb") as f:
         s3.upload_fileobj(f, bucket, s3_key)
     print(f"‚òÅÔ∏è Uploaded to S3: s3://{bucket}/{s3_key}")
 
+
 def main():
     download_excel()
     df = parse_excel_to_df()
     save_partitions(df)
 
+
 if __name__ == "__main__":
     main()
would reformat /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_publication.py
--- /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_daily_publication.py	2025-07-30 23:55:33.465013+00:00
+++ /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_daily_publication.py	2025-08-03 18:46:22.550961+00:00
@@ -14,35 +14,60 @@
 UPLOAD_TO_S3 = True
 S3_BUCKET = "mlops-milk-datalake"
 
 # Month translation ES ‚Üí EN
 meses_es_a_en = {
-    'enero': 'January', 'febrero': 'February', 'marzo': 'March',
-    'abril': 'April', 'mayo': 'May', 'junio': 'June',
-    'julio': 'July', 'agosto': 'August', 'septiembre': 'September',
-    'octubre': 'October', 'noviembre': 'November', 'diciembre': 'December'
+    "enero": "January",
+    "febrero": "February",
+    "marzo": "March",
+    "abril": "April",
+    "mayo": "May",
+    "junio": "June",
+    "julio": "July",
+    "agosto": "August",
+    "septiembre": "September",
+    "octubre": "October",
+    "noviembre": "November",
+    "diciembre": "December",
 }
+
 
 def download_excel(url=EXCEL_URL, output_path=EXCEL_FILE):
     output_dir = Path(output_path).parent
     output_dir.mkdir(parents=True, exist_ok=True)
 
     print(f"‚¨áÔ∏è  Downloading file from {url}")
     os.system(f"wget {url} -O {output_path}")
 
+
 def parse_excel_to_df(path=EXCEL_FILE):
     df = pd.read_excel(path, header=None)
     data_final = []
 
     for i, row in df.iterrows():
-        if row.astype(str).str.contains("Precio promedio al consumidor por litro", case=False, na=False).any():
+        if (
+            row.astype(str)
+            .str.contains(
+                "Precio promedio al consumidor por litro", case=False, na=False
+            )
+            .any()
+        ):
             row_fecha = df.iloc[i + 1]
-            fecha_raw = next((str(cell) for cell in row_fecha if isinstance(cell, str) and "de" in cell), None)
+            fecha_raw = next(
+                (
+                    str(cell)
+                    for cell in row_fecha
+                    if isinstance(cell, str) and "de" in cell
+                ),
+                None,
+            )
             if not fecha_raw:
                 continue
 
-            match = re.search(r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE)
+            match = re.search(
+                r"(\d{1,2}) de (\w+) de (\d{4})", fecha_raw, re.IGNORECASE
+            )
             if not match:
                 continue
             dia, mes, a√±o = match.groups()
             mes_en = meses_es_a_en.get(mes.lower())
             if not mes_en:
@@ -54,38 +79,50 @@
             for j in range(4):
                 tipo = "Pasteurizada" if j < 2 else "Ultrapasteurizada"
                 canal = enc2[j]
                 columnas.append(f"{tipo}_{canal}")
 
-            df_bloque = df.iloc[i + 4:, 0:6].copy()
+            df_bloque = df.iloc[i + 4 :, 0:6].copy()
             df_bloque.columns = columnas
-            df_bloque[['Estado', 'Ciudad']] = df_bloque[['Estado', 'Ciudad']].ffill()
+            df_bloque[["Estado", "Ciudad"]] = df_bloque[["Estado", "Ciudad"]].ffill()
 
             stop_idx = None
             for k, row_k in df_bloque.iterrows():
                 celda = str(row_k[0]).strip().lower()
-                if "promedio" in celda or "fuente" in celda or "sniim" in celda or celda == "estado" or celda == "nan":
+                if (
+                    "promedio" in celda
+                    or "fuente" in celda
+                    or "sniim" in celda
+                    or celda == "estado"
+                    or celda == "nan"
+                ):
                     stop_idx = k
                     break
 
             if stop_idx:
-                df_bloque = df_bloque.loc[:stop_idx - 1]
+                df_bloque = df_bloque.loc[: stop_idx - 1]
 
             df_bloque["Fecha"] = fecha
-            df_long = df_bloque.melt(id_vars=["Fecha", "Estado", "Ciudad"],
-                                     var_name="Tipo_Canal", value_name="Precio")
+            df_long = df_bloque.melt(
+                id_vars=["Fecha", "Estado", "Ciudad"],
+                var_name="Tipo_Canal",
+                value_name="Precio",
+            )
 
             df_long["Tipo"] = df_long["Tipo_Canal"].str.split("_").str[0]
             df_long["Canal"] = df_long["Tipo_Canal"].str.split("_").str[1]
             df_long = df_long[["Fecha", "Estado", "Ciudad", "Tipo", "Canal", "Precio"]]
             df_long["Precio"] = pd.to_numeric(df_long["Precio"], errors="coerce")
 
             data_final.append(df_long)
 
     df_final = pd.concat(data_final, ignore_index=True)
-    df_final = df_final[~df_final["Ciudad"].str.lower().str.contains("promedio", na=False)]
+    df_final = df_final[
+        ~df_final["Ciudad"].str.lower().str.contains("promedio", na=False)
+    ]
     return df_final
+
 
 def save_daily_partitions(df: pd.DataFrame, output_root="../data/datalake/daily"):
     df["Fecha"] = pd.to_datetime(df["Fecha"])
     df["A√±o"] = df["Fecha"].dt.year
     df["Mes"] = df["Fecha"].dt.month
@@ -101,18 +138,21 @@
 
         if UPLOAD_TO_S3:
             s3_key = f"daily/{a√±o}/{mes:02d}/{filename}"
             upload_to_s3(local_path, S3_BUCKET, s3_key)
 
+
 def upload_to_s3(local_path, bucket, s3_key):
     s3 = boto3.client("s3")
     with open(local_path, "rb") as f:
         s3.upload_fileobj(f, bucket, s3_key)
     print(f"‚òÅÔ∏è Uploaded to S3: s3://{bucket}/{s3_key}")
 
+
 def main():
     download_excel()
     df = parse_excel_to_df()
     save_daily_partitions(df)
 
+
 if __name__ == "__main__":
     main()
would reformat /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_daily_publication.py

All done! ‚ú® üç∞ ‚ú®
2 files would be reformatted.
reformatted /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_publication.py
reformatted /home/maxkaizo/milk_price_prediction/simulate_publication/simulate_daily_publication.py

All done! ‚ú® üç∞ ‚ú®
2 files reformatted.
